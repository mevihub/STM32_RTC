
RTC_INTERFACE_TEST_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003904  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b30  08003b30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b30  08003b30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b30  08003b30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08003ba8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003ba8  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091ba  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e1  00000000  00000000  0002925a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  0002a940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  0002b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001da67  00000000  00000000  0002b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007625  00000000  00000000  000491ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b2f16  00000000  00000000  00050814  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010372a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002068  00000000  00000000  001037a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a7c 	.word	0x08003a7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003a7c 	.word	0x08003a7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 faa5 	bl	80007c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f84f 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f939 	bl	80004f4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000282:	f000 f8ad 	bl	80003e0 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000286:	f000 f905 	bl	8000494 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800028a:	2200      	movs	r2, #0
 800028c:	491b      	ldr	r1, [pc, #108]	; (80002fc <main+0x8c>)
 800028e:	481c      	ldr	r0, [pc, #112]	; (8000300 <main+0x90>)
 8000290:	f002 f9bc 	bl	800260c <HAL_RTC_GetTime>
HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000294:	2200      	movs	r2, #0
 8000296:	491b      	ldr	r1, [pc, #108]	; (8000304 <main+0x94>)
 8000298:	4819      	ldr	r0, [pc, #100]	; (8000300 <main+0x90>)
 800029a:	f002 fabc 	bl	8002816 <HAL_RTC_GetDate>


sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <main+0x94>)
 80002a0:	789b      	ldrb	r3, [r3, #2]
 80002a2:	461a      	mov	r2, r3
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <main+0x94>)
 80002a6:	785b      	ldrb	r3, [r3, #1]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <main+0x94>)
 80002ac:	78db      	ldrb	r3, [r3, #3]
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	460b      	mov	r3, r1
 80002b2:	4915      	ldr	r1, [pc, #84]	; (8000308 <main+0x98>)
 80002b4:	4815      	ldr	r0, [pc, #84]	; (800030c <main+0x9c>)
 80002b6:	f002 ffdb 	bl	8003270 <siprintf>
sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <main+0x8c>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	461a      	mov	r2, r3
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <main+0x8c>)
 80002c2:	785b      	ldrb	r3, [r3, #1]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <main+0x8c>)
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	460b      	mov	r3, r1
 80002ce:	4910      	ldr	r1, [pc, #64]	; (8000310 <main+0xa0>)
 80002d0:	4810      	ldr	r0, [pc, #64]	; (8000314 <main+0xa4>)
 80002d2:	f002 ffcd 	bl	8003270 <siprintf>



HAL_UART_Transmit(&huart3, (uint8_t *)date, sizeof(date), 300);
 80002d6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80002da:	221e      	movs	r2, #30
 80002dc:	490b      	ldr	r1, [pc, #44]	; (800030c <main+0x9c>)
 80002de:	480e      	ldr	r0, [pc, #56]	; (8000318 <main+0xa8>)
 80002e0:	f002 fbc6 	bl	8002a70 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3, (uint8_t *)time, sizeof(time), 300);
 80002e4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80002e8:	221e      	movs	r2, #30
 80002ea:	490a      	ldr	r1, [pc, #40]	; (8000314 <main+0xa4>)
 80002ec:	480a      	ldr	r0, [pc, #40]	; (8000318 <main+0xa8>)
 80002ee:	f002 fbbf 	bl	8002a70 <HAL_UART_Transmit>
HAL_Delay(1000);
 80002f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f6:	f000 facb 	bl	8000890 <HAL_Delay>
HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80002fa:	e7c6      	b.n	800028a <main+0x1a>
 80002fc:	2000011c 	.word	0x2000011c
 8000300:	20000134 	.word	0x20000134
 8000304:	20000130 	.word	0x20000130
 8000308:	08003a94 	.word	0x08003a94
 800030c:	20000174 	.word	0x20000174
 8000310:	08003aac 	.word	0x08003aac
 8000314:	20000154 	.word	0x20000154
 8000318:	20000098 	.word	0x20000098

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b09e      	sub	sp, #120	; 0x78
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000326:	2228      	movs	r2, #40	; 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f002 ff98 	bl	8003260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	223c      	movs	r2, #60	; 0x3c
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f002 ff8a 	bl	8003260 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800034c:	2309      	movs	r3, #9
 800034e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000354:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035a:	2301      	movs	r3, #1
 800035c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000370:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fd0c 	bl	8000d94 <HAL_RCC_OscConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000382:	f000 f8f3 	bl	800056c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	230f      	movs	r3, #15
 8000388:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038a:	2302      	movs	r3, #2
 800038c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a0:	2102      	movs	r1, #2
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 fbfe 	bl	8001ba4 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ae:	f000 f8dd 	bl	800056c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_RTC;
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <SystemClock_Config+0xc0>)
 80003b4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003be:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fe24 	bl	8002010 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003ce:	f000 f8cd 	bl	800056c <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3778      	adds	r7, #120	; 0x78
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	00010004 	.word	0x00010004

080003e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80003f4:	2300      	movs	r3, #0
 80003f6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80003f8:	4b24      	ldr	r3, [pc, #144]	; (800048c <MX_RTC_Init+0xac>)
 80003fa:	4a25      	ldr	r2, [pc, #148]	; (8000490 <MX_RTC_Init+0xb0>)
 80003fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003fe:	4b23      	ldr	r3, [pc, #140]	; (800048c <MX_RTC_Init+0xac>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000404:	4b21      	ldr	r3, [pc, #132]	; (800048c <MX_RTC_Init+0xac>)
 8000406:	227f      	movs	r2, #127	; 0x7f
 8000408:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800040a:	4b20      	ldr	r3, [pc, #128]	; (800048c <MX_RTC_Init+0xac>)
 800040c:	22ff      	movs	r2, #255	; 0xff
 800040e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_RTC_Init+0xac>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <MX_RTC_Init+0xac>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_RTC_Init+0xac>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000422:	481a      	ldr	r0, [pc, #104]	; (800048c <MX_RTC_Init+0xac>)
 8000424:	f001 ffa4 	bl	8002370 <HAL_RTC_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800042e:	f000 f89d 	bl	800056c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x10;
 8000432:	2310      	movs	r3, #16
 8000434:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8000436:	2320      	movs	r3, #32
 8000438:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 800043a:	2330      	movs	r3, #48	; 0x30
 800043c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	480f      	ldr	r0, [pc, #60]	; (800048c <MX_RTC_Init+0xac>)
 800044e:	f002 f820 	bl	8002492 <HAL_RTC_SetTime>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000458:	f000 f888 	bl	800056c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800045c:	2301      	movs	r3, #1
 800045e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000460:	2303      	movs	r3, #3
 8000462:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000464:	2316      	movs	r3, #22
 8000466:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8000468:	2321      	movs	r3, #33	; 0x21
 800046a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800046c:	463b      	mov	r3, r7
 800046e:	2201      	movs	r2, #1
 8000470:	4619      	mov	r1, r3
 8000472:	4806      	ldr	r0, [pc, #24]	; (800048c <MX_RTC_Init+0xac>)
 8000474:	f002 f928 	bl	80026c8 <HAL_RTC_SetDate>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800047e:	f000 f875 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000134 	.word	0x20000134
 8000490:	40002800 	.word	0x40002800

08000494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_USART3_UART_Init+0x58>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <MX_USART3_UART_Init+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_USART3_UART_Init+0x58>)
 80004d8:	f002 fa7c 	bl	80029d4 <HAL_UART_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80004e2:	f000 f843 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000098 	.word	0x20000098
 80004f0:	40004800 	.word	0x40004800

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_GPIO_Init+0x74>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <MX_GPIO_Init+0x74>)
 8000500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_GPIO_Init+0x74>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_GPIO_Init+0x74>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a14      	ldr	r2, [pc, #80]	; (8000568 <MX_GPIO_Init+0x74>)
 8000518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_GPIO_Init+0x74>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_GPIO_Init+0x74>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <MX_GPIO_Init+0x74>)
 8000530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_GPIO_Init+0x74>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_GPIO_Init+0x74>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <MX_GPIO_Init+0x74>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_GPIO_Init+0x74>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x44>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x44>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_MspInit+0x44>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <HAL_MspInit+0x44>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_MspInit+0x44>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <HAL_RTC_MspInit+0x44>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d111      	bne.n	80005fa <HAL_RTC_MspInit+0x36>
 80005d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005da:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	fa93 f3a3 	rbit	r3, r3
 80005e2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005e4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005e6:	fab3 f383 	clz	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_RTC_MspInit+0x48>)
 80005f0:	4413      	add	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	461a      	mov	r2, r3
 80005f6:	2301      	movs	r3, #1
 80005f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40002800 	.word	0x40002800
 800060c:	10908100 	.word	0x10908100

08000610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <HAL_UART_MspInit+0x7c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d128      	bne.n	8000684 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <HAL_UART_MspInit+0x80>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <HAL_UART_MspInit+0x80>)
 8000638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_UART_MspInit+0x80>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_UART_MspInit+0x80>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <HAL_UART_MspInit+0x80>)
 8000650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_UART_MspInit+0x80>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000662:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000674:	2307      	movs	r3, #7
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <HAL_UART_MspInit+0x84>)
 8000680:	f000 fa0e 	bl	8000aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40004800 	.word	0x40004800
 8000690:	40021000 	.word	0x40021000
 8000694:	48000400 	.word	0x48000400

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f8b0 	bl	8000850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <_sbrk+0x50>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d102      	bne.n	800070a <_sbrk+0x16>
		heap_end = &end;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <_sbrk+0x50>)
 8000706:	4a10      	ldr	r2, [pc, #64]	; (8000748 <_sbrk+0x54>)
 8000708:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <_sbrk+0x50>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <_sbrk+0x50>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	466a      	mov	r2, sp
 800071a:	4293      	cmp	r3, r2
 800071c:	d907      	bls.n	800072e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800071e:	f002 fd75 	bl	800320c <__errno>
 8000722:	4602      	mov	r2, r0
 8000724:	230c      	movs	r3, #12
 8000726:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	e006      	b.n	800073c <_sbrk+0x48>
	}

	heap_end += incr;
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <_sbrk+0x50>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	4a03      	ldr	r2, [pc, #12]	; (8000744 <_sbrk+0x50>)
 8000738:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000008c 	.word	0x2000008c
 8000748:	200001a0 	.word	0x200001a0

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079a:	f7ff ffd7 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f002 fd3b 	bl	8003218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a2:	f7ff fd65 	bl	8000270 <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b4:	08003b38 	.word	0x08003b38
  ldr r2, =_sbss
 80007b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007bc:	2000019c 	.word	0x2000019c

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>
	...

080007c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_Init+0x28>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <HAL_Init+0x28>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f92f 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f808 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff fecc 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_InitTick+0x54>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x58>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	fbb3 f3f1 	udiv	r3, r3, r1
 800080a:	fbb2 f3f3 	udiv	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f939 	bl	8000a86 <HAL_SYSTICK_Config>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00e      	b.n	800083c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d80a      	bhi.n	800083a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f000 f90f 	bl	8000a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <HAL_InitTick+0x5c>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000000 	.word	0x20000000
 8000848:	20000008 	.word	0x20000008
 800084c:	20000004 	.word	0x20000004

08000850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x20>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x24>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_IncTick+0x24>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	20000194 	.word	0x20000194

08000878 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;  
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_GetTick+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000194 	.word	0x20000194

08000890 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff ffee 	bl	8000878 <HAL_GetTick>
 800089c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_Delay+0x40>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008b6:	bf00      	nop
 80008b8:	f7ff ffde 	bl	8000878 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000008 	.word	0x20000008

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff8e 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff47 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff5c 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff8e 	bl	800098c <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffb0 	bl	80009f4 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aae:	e154      	b.n	8000d5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	4013      	ands	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 8146 	beq.w	8000d54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d00b      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d007      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000adc:	2b11      	cmp	r3, #17
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b12      	cmp	r3, #18
 8000ae6:	d130      	bne.n	8000b4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	091b      	lsrs	r3, r3, #4
 8000b34:	f003 0201 	and.w	r2, r3, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0xea>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d123      	bne.n	8000bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	08da      	lsrs	r2, r3, #3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3208      	adds	r2, #8
 8000b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	691a      	ldr	r2, [r3, #16]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	08da      	lsrs	r2, r3, #3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	6939      	ldr	r1, [r7, #16]
 8000bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0203 	and.w	r2, r3, #3
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 80a0 	beq.w	8000d54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <HAL_GPIO_Init+0x2d8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a57      	ldr	r2, [pc, #348]	; (8000d78 <HAL_GPIO_Init+0x2d8>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b55      	ldr	r3, [pc, #340]	; (8000d78 <HAL_GPIO_Init+0x2d8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c2c:	4a53      	ldr	r2, [pc, #332]	; (8000d7c <HAL_GPIO_Init+0x2dc>)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3302      	adds	r3, #2
 8000c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c56:	d019      	beq.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a49      	ldr	r2, [pc, #292]	; (8000d80 <HAL_GPIO_Init+0x2e0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d013      	beq.n	8000c88 <HAL_GPIO_Init+0x1e8>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a48      	ldr	r2, [pc, #288]	; (8000d84 <HAL_GPIO_Init+0x2e4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d00d      	beq.n	8000c84 <HAL_GPIO_Init+0x1e4>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a47      	ldr	r2, [pc, #284]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0x1e0>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a46      	ldr	r2, [pc, #280]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d101      	bne.n	8000c7c <HAL_GPIO_Init+0x1dc>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e008      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9e:	4937      	ldr	r1, [pc, #220]	; (8000d7c <HAL_GPIO_Init+0x2dc>)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd0:	4a2f      	ldr	r2, [pc, #188]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d24:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f47f aea3 	bne.w	8000ab0 <HAL_GPIO_Init+0x10>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	48000400 	.word	0x48000400
 8000d84:	48000800 	.word	0x48000800
 8000d88:	48000c00 	.word	0x48000c00
 8000d8c:	48001000 	.word	0x48001000
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f000 bef4 	b.w	8001b96 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 816a 	beq.w	8001092 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dbe:	4bb3      	ldr	r3, [pc, #716]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d00c      	beq.n	8000de4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dca:	4bb0      	ldr	r3, [pc, #704]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 030c 	and.w	r3, r3, #12
 8000dd2:	2b08      	cmp	r3, #8
 8000dd4:	d159      	bne.n	8000e8a <HAL_RCC_OscConfig+0xf6>
 8000dd6:	4bad      	ldr	r3, [pc, #692]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de2:	d152      	bne.n	8000e8a <HAL_RCC_OscConfig+0xf6>
 8000de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8000df8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d102      	bne.n	8000e16 <HAL_RCC_OscConfig+0x82>
 8000e10:	4b9e      	ldr	r3, [pc, #632]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	e015      	b.n	8000e42 <HAL_RCC_OscConfig+0xae>
 8000e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e32:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e3e:	4b93      	ldr	r3, [pc, #588]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e46:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e4a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e4e:	fa92 f2a2 	rbit	r2, r2
 8000e52:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e56:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	f042 0220 	orr.w	r2, r2, #32
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	f002 021f 	and.w	r2, r2, #31
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 810c 	beq.w	8001090 <HAL_RCC_OscConfig+0x2fc>
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f040 8106 	bne.w	8001090 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f000 be86 	b.w	8001b96 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e94:	d106      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x110>
 8000e96:	4b7d      	ldr	r3, [pc, #500]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a7c      	ldr	r2, [pc, #496]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e030      	b.n	8000f06 <HAL_RCC_OscConfig+0x172>
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x134>
 8000eae:	4b77      	ldr	r3, [pc, #476]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a76      	ldr	r2, [pc, #472]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b74      	ldr	r3, [pc, #464]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a73      	ldr	r2, [pc, #460]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e01e      	b.n	8000f06 <HAL_RCC_OscConfig+0x172>
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed2:	d10c      	bne.n	8000eee <HAL_RCC_OscConfig+0x15a>
 8000ed4:	4b6d      	ldr	r3, [pc, #436]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a6c      	ldr	r2, [pc, #432]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b6a      	ldr	r3, [pc, #424]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a69      	ldr	r2, [pc, #420]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e00b      	b.n	8000f06 <HAL_RCC_OscConfig+0x172>
 8000eee:	4b67      	ldr	r3, [pc, #412]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a66      	ldr	r2, [pc, #408]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b64      	ldr	r3, [pc, #400]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a63      	ldr	r2, [pc, #396]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f06:	4b61      	ldr	r3, [pc, #388]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	f023 020f 	bic.w	r2, r3, #15
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	495d      	ldr	r1, [pc, #372]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d059      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fca8 	bl	8000878 <HAL_GetTick>
 8000f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2c:	e00a      	b.n	8000f44 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fca3 	bl	8000878 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	; 0x64
 8000f3c:	d902      	bls.n	8000f44 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f000 be29 	b.w	8001b96 <HAL_RCC_OscConfig+0xe02>
 8000f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f50:	fa93 f3a3 	rbit	r3, r3
 8000f54:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f58:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <HAL_RCC_OscConfig+0x1e2>
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	e015      	b.n	8000fa2 <HAL_RCC_OscConfig+0x20e>
 8000f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f92:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000faa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fae:	fa92 f2a2 	rbit	r2, r2
 8000fb2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fb6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	f042 0220 	orr.w	r2, r2, #32
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f002 021f 	and.w	r2, r2, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0ab      	beq.n	8000f2e <HAL_RCC_OscConfig+0x19a>
 8000fd6:	e05c      	b.n	8001092 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc4e 	bl	8000878 <HAL_GetTick>
 8000fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fc49 	bl	8000878 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d902      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f000 bdcf 	b.w	8001b96 <HAL_RCC_OscConfig+0xe02>
 8000ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800100c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <HAL_RCC_OscConfig+0x296>
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	e015      	b.n	8001056 <HAL_RCC_OscConfig+0x2c2>
 800102a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800103e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001042:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001046:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_RCC_OscConfig+0x2f8>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800105e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001062:	fa92 f2a2 	rbit	r2, r2
 8001066:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800106a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f002 021f 	and.w	r2, r2, #31
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1ab      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x24e>
 800108a:	e002      	b.n	8001092 <HAL_RCC_OscConfig+0x2fe>
 800108c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 816f 	beq.w	8001380 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010a2:	4bd0      	ldr	r3, [pc, #832]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00b      	beq.n	80010c6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010ae:	4bcd      	ldr	r3, [pc, #820]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d16c      	bne.n	8001194 <HAL_RCC_OscConfig+0x400>
 80010ba:	4bca      	ldr	r3, [pc, #808]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d166      	bne.n	8001194 <HAL_RCC_OscConfig+0x400>
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d102      	bne.n	80010f6 <HAL_RCC_OscConfig+0x362>
 80010f0:	4bbc      	ldr	r3, [pc, #752]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	e013      	b.n	800111e <HAL_RCC_OscConfig+0x38a>
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800110e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800111a:	4bb2      	ldr	r3, [pc, #712]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	2202      	movs	r2, #2
 8001120:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001124:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001128:	fa92 f2a2 	rbit	r2, r2
 800112c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001130:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001134:	fab2 f282 	clz	r2, r2
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	f042 0220 	orr.w	r2, r2, #32
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	f002 021f 	and.w	r2, r2, #31
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_RCC_OscConfig+0x3cc>
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d002      	beq.n	8001160 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f000 bd1b 	b.w	8001b96 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4ba0      	ldr	r3, [pc, #640]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	21f8      	movs	r1, #248	; 0xf8
 8001170:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001178:	fa91 f1a1 	rbit	r1, r1
 800117c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001180:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001184:	fab1 f181 	clz	r1, r1
 8001188:	b2c9      	uxtb	r1, r1
 800118a:	408b      	lsls	r3, r1
 800118c:	4995      	ldr	r1, [pc, #596]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	e0f5      	b.n	8001380 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8085 	beq.w	80012aa <HAL_RCC_OscConfig+0x516>
 80011a0:	2301      	movs	r3, #1
 80011a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	461a      	mov	r2, r3
 80011c8:	2301      	movs	r3, #1
 80011ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fb54 	bl	8000878 <HAL_GetTick>
 80011d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d6:	f7ff fb4f 	bl	8000878 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d902      	bls.n	80011ec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f000 bcd5 	b.w	8001b96 <HAL_RCC_OscConfig+0xe02>
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	095b      	lsrs	r3, r3, #5
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x488>
 8001216:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	e013      	b.n	8001244 <HAL_RCC_OscConfig+0x4b0>
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001234:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001240:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2202      	movs	r2, #2
 8001246:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800124a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800124e:	fa92 f2a2 	rbit	r2, r2
 8001252:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001256:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800125a:	fab2 f282 	clz	r2, r2
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f042 0220 	orr.w	r2, r2, #32
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f002 021f 	and.w	r2, r2, #31
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0af      	beq.n	80011d6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	21f8      	movs	r1, #248	; 0xf8
 8001286:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800128e:	fa91 f1a1 	rbit	r1, r1
 8001292:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001296:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800129a:	fab1 f181 	clz	r1, r1
 800129e:	b2c9      	uxtb	r1, r1
 80012a0:	408b      	lsls	r3, r1
 80012a2:	4950      	ldr	r1, [pc, #320]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	600b      	str	r3, [r1, #0]
 80012a8:	e06a      	b.n	8001380 <HAL_RCC_OscConfig+0x5ec>
 80012aa:	2301      	movs	r3, #1
 80012ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	461a      	mov	r2, r3
 80012d2:	2300      	movs	r3, #0
 80012d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff facf 	bl	8000878 <HAL_GetTick>
 80012da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e0:	f7ff faca 	bl	8000878 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d902      	bls.n	80012f6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f000 bc50 	b.w	8001b96 <HAL_RCC_OscConfig+0xe02>
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b01      	cmp	r3, #1
 800131e:	d102      	bne.n	8001326 <HAL_RCC_OscConfig+0x592>
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	e013      	b.n	800134e <HAL_RCC_OscConfig+0x5ba>
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800133e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_RCC_OscConfig+0x650>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	2202      	movs	r2, #2
 8001350:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001354:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001358:	fa92 f2a2 	rbit	r2, r2
 800135c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001360:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001364:	fab2 f282 	clz	r2, r2
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f042 0220 	orr.w	r2, r2, #32
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	f002 021f 	and.w	r2, r2, #31
 8001374:	2101      	movs	r1, #1
 8001376:	fa01 f202 	lsl.w	r2, r1, r2
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1af      	bne.n	80012e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80da 	beq.w	8001544 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d069      	beq.n	800146e <HAL_RCC_OscConfig+0x6da>
 800139a:	2301      	movs	r3, #1
 800139c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_OscConfig+0x654>)
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	461a      	mov	r2, r3
 80013c0:	2301      	movs	r3, #1
 80013c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fa58 	bl	8000878 <HAL_GetTick>
 80013c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013cc:	e00e      	b.n	80013ec <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff fa53 	bl	8000878 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d906      	bls.n	80013ec <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e3d9      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	10908120 	.word	0x10908120
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001402:	2202      	movs	r2, #2
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fa93 f2a3 	rbit	r2, r3
 8001428:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800142c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4ba5      	ldr	r3, [pc, #660]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001432:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001436:	2102      	movs	r1, #2
 8001438:	6019      	str	r1, [r3, #0]
 800143a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f1a3 	rbit	r1, r3
 8001444:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001448:	6019      	str	r1, [r3, #0]
  return result;
 800144a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	fab3 f383 	clz	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0b0      	beq.n	80013ce <HAL_RCC_OscConfig+0x63a>
 800146c:	e06a      	b.n	8001544 <HAL_RCC_OscConfig+0x7b0>
 800146e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f2a3 	rbit	r2, r3
 8001480:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001484:	601a      	str	r2, [r3, #0]
  return result;
 8001486:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800148a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	4b8c      	ldr	r3, [pc, #560]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	2300      	movs	r3, #0
 800149e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff f9ea 	bl	8000878 <HAL_GetTick>
 80014a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	e009      	b.n	80014be <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff f9e5 	bl	8000878 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e36b      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
 80014be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014c2:	2202      	movs	r2, #2
 80014c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fa93 f2a3 	rbit	r2, r3
 80014d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001504:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001506:	4b6f      	ldr	r3, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800150e:	2102      	movs	r1, #2
 8001510:	6019      	str	r1, [r3, #0]
 8001512:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	fa93 f1a3 	rbit	r1, r3
 800151c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001520:	6019      	str	r1, [r3, #0]
  return result;
 8001522:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1b2      	bne.n	80014aa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8158 	beq.w	8001804 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d112      	bne.n	800158c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b57      	ldr	r3, [pc, #348]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a56      	ldr	r2, [pc, #344]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b54      	ldr	r3, [pc, #336]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <HAL_RCC_OscConfig+0x938>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d11a      	bne.n	80015ce <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001598:	4b4c      	ldr	r3, [pc, #304]	; (80016cc <HAL_RCC_OscConfig+0x938>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_RCC_OscConfig+0x938>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a4:	f7ff f968 	bl	8000878 <HAL_GetTick>
 80015a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff f963 	bl	8000878 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e2e9      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b42      	ldr	r3, [pc, #264]	; (80016cc <HAL_RCC_OscConfig+0x938>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ef      	beq.n	80015ae <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x852>
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a39      	ldr	r2, [pc, #228]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	e02f      	b.n	8001646 <HAL_RCC_OscConfig+0x8b2>
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x876>
 80015f0:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a30      	ldr	r2, [pc, #192]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6213      	str	r3, [r2, #32]
 8001608:	e01d      	b.n	8001646 <HAL_RCC_OscConfig+0x8b2>
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0x89a>
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	e00b      	b.n	8001646 <HAL_RCC_OscConfig+0x8b2>
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d06b      	beq.n	8001728 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff f912 	bl	8000878 <HAL_GetTick>
 8001654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	e00b      	b.n	8001672 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff f90d 	bl	8000878 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e291      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
 8001672:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001676:	2202      	movs	r2, #2
 8001678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	fa93 f2a3 	rbit	r2, r3
 800169c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016a0:	601a      	str	r2, [r3, #0]
  return result;
 80016a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d109      	bne.n	80016d0 <HAL_RCC_OscConfig+0x93c>
 80016bc:	4b01      	ldr	r3, [pc, #4]	; (80016c4 <HAL_RCC_OscConfig+0x930>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	e014      	b.n	80016ec <HAL_RCC_OscConfig+0x958>
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	10908120 	.word	0x10908120
 80016cc:	40007000 	.word	0x40007000
 80016d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fa93 f2a3 	rbit	r2, r3
 80016e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	4bbb      	ldr	r3, [pc, #748]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016f0:	2102      	movs	r1, #2
 80016f2:	6011      	str	r1, [r2, #0]
 80016f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	fa92 f1a2 	rbit	r1, r2
 80016fe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001702:	6011      	str	r1, [r2, #0]
  return result;
 8001704:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	fab2 f282 	clz	r2, r2
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f002 021f 	and.w	r2, r2, #31
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d099      	beq.n	800165a <HAL_RCC_OscConfig+0x8c6>
 8001726:	e063      	b.n	80017f0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff f8a6 	bl	8000878 <HAL_GetTick>
 800172c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff f8a1 	bl	8000878 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e225      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
 800174a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001778:	601a      	str	r2, [r3, #0]
  return result;
 800177a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800177e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d102      	bne.n	800179a <HAL_RCC_OscConfig+0xa06>
 8001794:	4b90      	ldr	r3, [pc, #576]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	e00d      	b.n	80017b6 <HAL_RCC_OscConfig+0xa22>
 800179a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017ba:	2102      	movs	r1, #2
 80017bc:	6011      	str	r1, [r2, #0]
 80017be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	fa92 f1a2 	rbit	r1, r2
 80017c8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80017cc:	6011      	str	r1, [r2, #0]
  return result;
 80017ce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	fab2 f282 	clz	r2, r2
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1a0      	bne.n	8001732 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b77      	ldr	r3, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	4a76      	ldr	r2, [pc, #472]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 81c2 	beq.w	8001b94 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001810:	4b71      	ldr	r3, [pc, #452]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	f000 819c 	beq.w	8001b56 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b02      	cmp	r3, #2
 8001826:	f040 8114 	bne.w	8001a52 <HAL_RCC_OscConfig+0xcbe>
 800182a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800182e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f2a3 	rbit	r2, r3
 800183e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001842:	601a      	str	r2, [r3, #0]
  return result;
 8001844:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001848:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001854:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	461a      	mov	r2, r3
 800185c:	2300      	movs	r3, #0
 800185e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f80a 	bl	8000878 <HAL_GetTick>
 8001864:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	e009      	b.n	800187e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff f805 	bl	8000878 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e18b      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
 800187e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001882:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f2a3 	rbit	r2, r3
 8001892:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001896:	601a      	str	r2, [r3, #0]
  return result;
 8001898:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800189c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d102      	bne.n	80018b8 <HAL_RCC_OscConfig+0xb24>
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	e01b      	b.n	80018f0 <HAL_RCC_OscConfig+0xb5c>
 80018b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018f8:	6011      	str	r1, [r2, #0]
 80018fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	fa92 f1a2 	rbit	r1, r2
 8001904:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001908:	6011      	str	r1, [r2, #0]
  return result;
 800190a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	fab2 f282 	clz	r2, r2
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	f042 0220 	orr.w	r2, r2, #32
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	f002 021f 	and.w	r2, r2, #31
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d19e      	bne.n	800186a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	430b      	orrs	r3, r1
 8001942:	4925      	ldr	r1, [pc, #148]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800194c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001960:	601a      	str	r2, [r3, #0]
  return result;
 8001962:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001966:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001972:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	461a      	mov	r2, r3
 800197a:	2301      	movs	r3, #1
 800197c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7fe ff7b 	bl	8000878 <HAL_GetTick>
 8001982:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001986:	e009      	b.n	800199c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001988:	f7fe ff76 	bl	8000878 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0fc      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
 800199c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019b4:	601a      	str	r2, [r3, #0]
  return result;
 80019b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0xc48>
 80019d0:	4b01      	ldr	r3, [pc, #4]	; (80019d8 <HAL_RCC_OscConfig+0xc44>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e01e      	b.n	8001a14 <HAL_RCC_OscConfig+0xc80>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_OscConfig+0xe0c>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a1c:	6011      	str	r1, [r2, #0]
 8001a1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	fa92 f1a2 	rbit	r1, r2
 8001a28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a2c:	6011      	str	r1, [r2, #0]
  return result;
 8001a2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d09b      	beq.n	8001988 <HAL_RCC_OscConfig+0xbf4>
 8001a50:	e0a0      	b.n	8001b94 <HAL_RCC_OscConfig+0xe00>
 8001a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	601a      	str	r2, [r3, #0]
  return result;
 8001a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	461a      	mov	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7fe fef6 	bl	8000878 <HAL_GetTick>
 8001a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	e009      	b.n	8001aa6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a92:	f7fe fef1 	bl	8000878 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e077      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
 8001aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	601a      	str	r2, [r3, #0]
  return result;
 8001ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	095b      	lsrs	r3, r3, #5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xd4c>
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_RCC_OscConfig+0xe0c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	e01b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd84>
 8001ae0:	f107 0320 	add.w	r3, r7, #32
 8001ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_OscConfig+0xe0c>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f107 0210 	add.w	r2, r7, #16
 8001b1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b20:	6011      	str	r1, [r2, #0]
 8001b22:	f107 0210 	add.w	r2, r7, #16
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	fa92 f1a2 	rbit	r1, r2
 8001b2c:	f107 020c 	add.w	r2, r7, #12
 8001b30:	6011      	str	r1, [r2, #0]
  return result;
 8001b32:	f107 020c 	add.w	r2, r7, #12
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	fab2 f282 	clz	r2, r2
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f002 021f 	and.w	r2, r2, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d19e      	bne.n	8001a92 <HAL_RCC_OscConfig+0xcfe>
 8001b54:	e01e      	b.n	8001b94 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e018      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_RCC_OscConfig+0xe0c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b6c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b09e      	sub	sp, #120	; 0x78
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e162      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b90      	ldr	r3, [pc, #576]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d910      	bls.n	8001bec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b8d      	ldr	r3, [pc, #564]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	498b      	ldr	r1, [pc, #556]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e14a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	497f      	ldr	r1, [pc, #508]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80dc 	beq.w	8001dd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d13c      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xf6>
 8001c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d102      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xa6>
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	e00f      	b.n	8001c6a <HAL_RCC_ClockConfig+0xc6>
 8001c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	667b      	str	r3, [r7, #100]	; 0x64
 8001c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c72:	fa92 f2a2 	rbit	r2, r2
 8001c76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0220 	orr.w	r2, r2, #32
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d17b      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0f3      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d13c      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x178>
 8001ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x128>
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e00f      	b.n	8001cec <HAL_RCC_ClockConfig+0x148>
 8001ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8001cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cde:	643b      	str	r3, [r7, #64]	; 0x40
 8001ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce8:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cf4:	fa92 f2a2 	rbit	r2, r2
 8001cf8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d13a      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b2      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x1a0>
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	e00d      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1bc>
 8001d44:	2302      	movs	r3, #2
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2202      	movs	r2, #2
 8001d62:	61ba      	str	r2, [r7, #24]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	617a      	str	r2, [r7, #20]
  return result;
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	fab2 f282 	clz	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f042 0220 	orr.w	r2, r2, #32
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f002 021f 	and.w	r2, r2, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e079      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	491a      	ldr	r1, [pc, #104]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7fe fd6a 	bl	8000878 <HAL_GetTick>
 8001da4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7fe fd66 	bl	8000878 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e061      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d214      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 0207 	bic.w	r2, r3, #7
 8001de6:	4906      	ldr	r1, [pc, #24]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e040      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	491a      	ldr	r1, [pc, #104]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4912      	ldr	r1, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e46:	f000 f829 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e54:	22f0      	movs	r2, #240	; 0xf0
 8001e56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	fa92 f2a2 	rbit	r2, r2
 8001e5e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	40d3      	lsrs	r3, r2
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x2ec>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_RCC_ClockConfig+0x2f0>)
 8001e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_RCC_ClockConfig+0x2f4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fcb8 	bl	80007f0 <HAL_InitTick>
  
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3778      	adds	r7, #120	; 0x78
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08003ac4 	.word	0x08003ac4
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b08b      	sub	sp, #44	; 0x2c
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x30>
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eca:	e03c      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ece:	623b      	str	r3, [r7, #32]
      break;
 8001ed0:	e03c      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ed8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001edc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	fa92 f2a2 	rbit	r2, r2
 8001ee4:	607a      	str	r2, [r7, #4]
  return result;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	fab2 f282 	clz	r2, r2
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	40d3      	lsrs	r3, r2
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	220f      	movs	r2, #15
 8001f00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	fa92 f2a2 	rbit	r2, r2
 8001f08:	60fa      	str	r2, [r7, #12]
  return result;
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	fab2 f282 	clz	r2, r2
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	40d3      	lsrs	r3, r2
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e004      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	623b      	str	r3, [r7, #32]
      break;
 8001f44:	e002      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f48:	623b      	str	r3, [r7, #32]
      break;
 8001f4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	372c      	adds	r7, #44	; 0x2c
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	08003adc 	.word	0x08003adc
 8001f68:	08003aec 	.word	0x08003aec
 8001f6c:	003d0900 	.word	0x003d0900

08001f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f8e:	f7ff ffef 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fa0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	fa92 f2a2 	rbit	r2, r2
 8001fa8:	603a      	str	r2, [r7, #0]
  return result;
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	fab2 f282 	clz	r2, r2
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	40d3      	lsrs	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08003ad4 	.word	0x08003ad4

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001fd2:	f7ff ffcd 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001fe0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001fe4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	fa92 f2a2 	rbit	r2, r2
 8001fec:	603a      	str	r2, [r7, #0]
  return result;
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	fab2 f282 	clz	r2, r2
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	40d3      	lsrs	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	08003ad4 	.word	0x08003ad4

08002010 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b092      	sub	sp, #72	; 0x48
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80d4 	beq.w	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002034:	4b4e      	ldr	r3, [pc, #312]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10e      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	61d3      	str	r3, [r2, #28]
 800204c:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b42      	ldr	r3, [pc, #264]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a41      	ldr	r2, [pc, #260]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7fe fbff 	bl	8000878 <HAL_GetTick>
 800207a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7fe fbfb 	bl	8000878 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b64      	cmp	r3, #100	; 0x64
 800208a:	d901      	bls.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e169      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8084 	beq.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d07c      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	461a      	mov	r2, r3
 80020e6:	2301      	movs	r3, #1
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	461a      	mov	r2, r3
 800210a:	2300      	movs	r3, #0
 800210c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002112:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d04b      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe fbab 	bl	8000878 <HAL_GetTick>
 8002122:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fba7 	bl	8000878 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e113      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800213c:	2302      	movs	r3, #2
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
 8002148:	2302      	movs	r3, #2
 800214a:	623b      	str	r3, [r7, #32]
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	61fb      	str	r3, [r7, #28]
  return result;
 8002154:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d108      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800216a:	4b01      	ldr	r3, [pc, #4]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	e00d      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	10908100 	.word	0x10908100
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	4b78      	ldr	r3, [pc, #480]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	2202      	movs	r2, #2
 800218e:	613a      	str	r2, [r7, #16]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	fa92 f2a2 	rbit	r2, r2
 8002196:	60fa      	str	r2, [r7, #12]
  return result;
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f002 021f 	and.w	r2, r2, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0b7      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021b6:	4b6d      	ldr	r3, [pc, #436]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	496a      	ldr	r1, [pc, #424]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e8:	4b60      	ldr	r3, [pc, #384]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f023 0203 	bic.w	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	495d      	ldr	r1, [pc, #372]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002206:	4b59      	ldr	r3, [pc, #356]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	4956      	ldr	r1, [pc, #344]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002224:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	494e      	ldr	r1, [pc, #312]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002242:	4b4a      	ldr	r3, [pc, #296]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f023 0210 	bic.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4947      	ldr	r1, [pc, #284]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002250:	4313      	orrs	r3, r2
 8002252:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002260:	4b42      	ldr	r3, [pc, #264]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	493f      	ldr	r1, [pc, #252]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f023 0220 	bic.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4938      	ldr	r1, [pc, #224]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	4930      	ldr	r1, [pc, #192]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	4929      	ldr	r1, [pc, #164]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	4921      	ldr	r1, [pc, #132]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	491a      	ldr	r1, [pc, #104]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	4912      	ldr	r1, [pc, #72]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002322:	4313      	orrs	r3, r2
 8002324:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	490b      	ldr	r1, [pc, #44]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3748      	adds	r7, #72	; 0x48
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e083      	b.n	800248a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7f5b      	ldrb	r3, [r3, #29]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe f916 	bl	80005c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	22ca      	movs	r2, #202	; 0xca
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2253      	movs	r2, #83	; 0x53
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 faa8 	bl	8002904 <RTC_EnterInitMode>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e05e      	b.n	800248a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80023da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68d2      	ldr	r2, [r2, #12]
 8002406:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	041a      	lsls	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10e      	bne.n	8002458 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa3a 	bl	80028b4 <HAL_RTC_WaitForSynchro>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	22ff      	movs	r2, #255	; 0xff
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2204      	movs	r2, #4
 8002452:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e018      	b.n	800248a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	22ff      	movs	r2, #255	; 0xff
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002488:	2300      	movs	r3, #0
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	7f1b      	ldrb	r3, [r3, #28]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_RTC_SetTime+0x1c>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0aa      	b.n	8002604 <HAL_RTC_SetTime+0x172>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2202      	movs	r2, #2
 80024b8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d126      	bne.n	800250e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fa3f 	bl	800295c <RTC_ByteToBcd2>
 80024de:	4603      	mov	r3, r0
 80024e0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fa38 	bl	800295c <RTC_ByteToBcd2>
 80024ec:	4603      	mov	r3, r0
 80024ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024f0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	789b      	ldrb	r3, [r3, #2]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fa30 	bl	800295c <RTC_ByteToBcd2>
 80024fc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80024fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	78db      	ldrb	r3, [r3, #3]
 8002506:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e018      	b.n	8002540 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2200      	movs	r2, #0
 8002520:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800252e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002534:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	78db      	ldrb	r3, [r3, #3]
 800253a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	22ca      	movs	r2, #202	; 0xca
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2253      	movs	r2, #83	; 0x53
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f9d7 	bl	8002904 <RTC_EnterInitMode>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	22ff      	movs	r2, #255	; 0xff
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2204      	movs	r2, #4
 8002568:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e047      	b.n	8002604 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800257e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002582:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002592:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d111      	bne.n	80025ee <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f972 	bl	80028b4 <HAL_RTC_WaitForSynchro>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	22ff      	movs	r2, #255	; 0xff
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2204      	movs	r2, #4
 80025e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00a      	b.n	8002604 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	22ff      	movs	r2, #255	; 0xff
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002602:	2300      	movs	r3, #0
  }
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800263e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002642:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	0c1b      	lsrs	r3, r3, #16
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11a      	bne.n	80026be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f983 	bl	8002998 <RTC_Bcd2ToByte>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	785b      	ldrb	r3, [r3, #1]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f97a 	bl	8002998 <RTC_Bcd2ToByte>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	789b      	ldrb	r3, [r3, #2]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f971 	bl	8002998 <RTC_Bcd2ToByte>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	7f1b      	ldrb	r3, [r3, #28]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_RTC_SetDate+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e094      	b.n	800280e <HAL_RTC_SetDate+0x146>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2202      	movs	r2, #2
 80026ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10e      	bne.n	8002714 <HAL_RTC_SetDate+0x4c>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	785b      	ldrb	r3, [r3, #1]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	f023 0310 	bic.w	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	330a      	adds	r3, #10
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11c      	bne.n	8002754 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	78db      	ldrb	r3, [r3, #3]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f91c 	bl	800295c <RTC_ByteToBcd2>
 8002724:	4603      	mov	r3, r0
 8002726:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f915 	bl	800295c <RTC_ByteToBcd2>
 8002732:	4603      	mov	r3, r0
 8002734:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002736:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	789b      	ldrb	r3, [r3, #2]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f90d 	bl	800295c <RTC_ByteToBcd2>
 8002742:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002744:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e00e      	b.n	8002772 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	78db      	ldrb	r3, [r3, #3]
 8002758:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	785b      	ldrb	r3, [r3, #1]
 800275e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002760:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002766:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	22ca      	movs	r2, #202	; 0xca
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2253      	movs	r2, #83	; 0x53
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f8be 	bl	8002904 <RTC_EnterInitMode>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2204      	movs	r2, #4
 800279a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e033      	b.n	800280e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80027b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f86d 	bl	80028b4 <HAL_RTC_WaitForSynchro>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	22ff      	movs	r2, #255	; 0xff
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2204      	movs	r2, #4
 80027ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e00a      	b.n	800280e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	22ff      	movs	r2, #255	; 0xff
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800280c:	2300      	movs	r3, #0
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd90      	pop	{r4, r7, pc}

08002816 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002830:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002834:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	0b5b      	lsrs	r3, r3, #13
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11a      	bne.n	80028aa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	78db      	ldrb	r3, [r3, #3]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 f88d 	bl	8002998 <RTC_Bcd2ToByte>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f884 	bl	8002998 <RTC_Bcd2ToByte>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	789b      	ldrb	r3, [r3, #2]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f87b 	bl	8002998 <RTC_Bcd2ToByte>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80028d0:	f7fd ffd2 	bl	8000878 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80028d6:	e009      	b.n	80028ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028d8:	f7fd ffce 	bl	8000878 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e6:	d901      	bls.n	80028ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e007      	b.n	80028fc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d119      	bne.n	8002952 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f04f 32ff 	mov.w	r2, #4294967295
 8002926:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002928:	f7fd ffa6 	bl	8000878 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800292e:	e009      	b.n	8002944 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002930:	f7fd ffa2 	bl	8000878 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293e:	d901      	bls.n	8002944 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e007      	b.n	8002954 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ee      	beq.n	8002930 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800296a:	e005      	b.n	8002978 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3301      	adds	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	3b0a      	subs	r3, #10
 8002976:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	2b09      	cmp	r3, #9
 800297c:	d8f6      	bhi.n	800296c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	b2da      	uxtb	r2, r3
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4313      	orrs	r3, r2
 800298a:	b2db      	uxtb	r3, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	b2db      	uxtb	r3, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e040      	b.n	8002a68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fd fe0a 	bl	8000610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8c0 	bl	8002b98 <UART_SetConfig>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e022      	b.n	8002a68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fa86 	bl	8002f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fb0d 	bl	8003080 <UART_CheckIdleState>
 8002a66:	4603      	mov	r3, r0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 8082 	bne.w	8002b8e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_UART_Transmit+0x26>
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e07a      	b.n	8002b90 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_UART_Transmit+0x38>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e073      	b.n	8002b90 <HAL_UART_Transmit+0x120>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002abe:	f7fd fedb 	bl	8000878 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002adc:	d108      	bne.n	8002af0 <HAL_UART_Transmit+0x80>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e003      	b.n	8002af8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b00:	e02d      	b.n	8002b5e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fb00 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e039      	b.n	8002b90 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2e:	b292      	uxth	r2, r2
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	3302      	adds	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e008      	b.n	8002b4c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b292      	uxth	r2, r2
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1cb      	bne.n	8002b02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 facc 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e005      	b.n	8002b90 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bc6:	f023 030c 	bic.w	r3, r3, #12
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4aad      	ldr	r2, [pc, #692]	; (8002ec8 <UART_SetConfig+0x330>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d121      	bne.n	8002c5c <UART_SetConfig+0xc4>
 8002c18:	4bac      	ldr	r3, [pc, #688]	; (8002ecc <UART_SetConfig+0x334>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d817      	bhi.n	8002c54 <UART_SetConfig+0xbc>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <UART_SetConfig+0x94>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c49 	.word	0x08002c49
 8002c34:	08002c4f 	.word	0x08002c4f
 8002c38:	08002c43 	.word	0x08002c43
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	77fb      	strb	r3, [r7, #31]
 8002c40:	e0b2      	b.n	8002da8 <UART_SetConfig+0x210>
 8002c42:	2302      	movs	r3, #2
 8002c44:	77fb      	strb	r3, [r7, #31]
 8002c46:	e0af      	b.n	8002da8 <UART_SetConfig+0x210>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	77fb      	strb	r3, [r7, #31]
 8002c4c:	e0ac      	b.n	8002da8 <UART_SetConfig+0x210>
 8002c4e:	2308      	movs	r3, #8
 8002c50:	77fb      	strb	r3, [r7, #31]
 8002c52:	e0a9      	b.n	8002da8 <UART_SetConfig+0x210>
 8002c54:	2310      	movs	r3, #16
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	bf00      	nop
 8002c5a:	e0a5      	b.n	8002da8 <UART_SetConfig+0x210>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a9b      	ldr	r2, [pc, #620]	; (8002ed0 <UART_SetConfig+0x338>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d123      	bne.n	8002cae <UART_SetConfig+0x116>
 8002c66:	4b99      	ldr	r3, [pc, #612]	; (8002ecc <UART_SetConfig+0x334>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c72:	d012      	beq.n	8002c9a <UART_SetConfig+0x102>
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d802      	bhi.n	8002c80 <UART_SetConfig+0xe8>
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <UART_SetConfig+0xf6>
 8002c7e:	e012      	b.n	8002ca6 <UART_SetConfig+0x10e>
 8002c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c84:	d00c      	beq.n	8002ca0 <UART_SetConfig+0x108>
 8002c86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c8a:	d003      	beq.n	8002c94 <UART_SetConfig+0xfc>
 8002c8c:	e00b      	b.n	8002ca6 <UART_SetConfig+0x10e>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	77fb      	strb	r3, [r7, #31]
 8002c92:	e089      	b.n	8002da8 <UART_SetConfig+0x210>
 8002c94:	2302      	movs	r3, #2
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e086      	b.n	8002da8 <UART_SetConfig+0x210>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e083      	b.n	8002da8 <UART_SetConfig+0x210>
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e080      	b.n	8002da8 <UART_SetConfig+0x210>
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	bf00      	nop
 8002cac:	e07c      	b.n	8002da8 <UART_SetConfig+0x210>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a88      	ldr	r2, [pc, #544]	; (8002ed4 <UART_SetConfig+0x33c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d123      	bne.n	8002d00 <UART_SetConfig+0x168>
 8002cb8:	4b84      	ldr	r3, [pc, #528]	; (8002ecc <UART_SetConfig+0x334>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002cc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cc4:	d012      	beq.n	8002cec <UART_SetConfig+0x154>
 8002cc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cca:	d802      	bhi.n	8002cd2 <UART_SetConfig+0x13a>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <UART_SetConfig+0x148>
 8002cd0:	e012      	b.n	8002cf8 <UART_SetConfig+0x160>
 8002cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cd6:	d00c      	beq.n	8002cf2 <UART_SetConfig+0x15a>
 8002cd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cdc:	d003      	beq.n	8002ce6 <UART_SetConfig+0x14e>
 8002cde:	e00b      	b.n	8002cf8 <UART_SetConfig+0x160>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e060      	b.n	8002da8 <UART_SetConfig+0x210>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	77fb      	strb	r3, [r7, #31]
 8002cea:	e05d      	b.n	8002da8 <UART_SetConfig+0x210>
 8002cec:	2304      	movs	r3, #4
 8002cee:	77fb      	strb	r3, [r7, #31]
 8002cf0:	e05a      	b.n	8002da8 <UART_SetConfig+0x210>
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	e057      	b.n	8002da8 <UART_SetConfig+0x210>
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	bf00      	nop
 8002cfe:	e053      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a74      	ldr	r2, [pc, #464]	; (8002ed8 <UART_SetConfig+0x340>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d123      	bne.n	8002d52 <UART_SetConfig+0x1ba>
 8002d0a:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <UART_SetConfig+0x334>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d16:	d012      	beq.n	8002d3e <UART_SetConfig+0x1a6>
 8002d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d1c:	d802      	bhi.n	8002d24 <UART_SetConfig+0x18c>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <UART_SetConfig+0x19a>
 8002d22:	e012      	b.n	8002d4a <UART_SetConfig+0x1b2>
 8002d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d28:	d00c      	beq.n	8002d44 <UART_SetConfig+0x1ac>
 8002d2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d2e:	d003      	beq.n	8002d38 <UART_SetConfig+0x1a0>
 8002d30:	e00b      	b.n	8002d4a <UART_SetConfig+0x1b2>
 8002d32:	2300      	movs	r3, #0
 8002d34:	77fb      	strb	r3, [r7, #31]
 8002d36:	e037      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	77fb      	strb	r3, [r7, #31]
 8002d3c:	e034      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	77fb      	strb	r3, [r7, #31]
 8002d42:	e031      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d44:	2308      	movs	r3, #8
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e02e      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	77fb      	strb	r3, [r7, #31]
 8002d4e:	bf00      	nop
 8002d50:	e02a      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a61      	ldr	r2, [pc, #388]	; (8002edc <UART_SetConfig+0x344>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d123      	bne.n	8002da4 <UART_SetConfig+0x20c>
 8002d5c:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <UART_SetConfig+0x334>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d68:	d012      	beq.n	8002d90 <UART_SetConfig+0x1f8>
 8002d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6e:	d802      	bhi.n	8002d76 <UART_SetConfig+0x1de>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <UART_SetConfig+0x1ec>
 8002d74:	e012      	b.n	8002d9c <UART_SetConfig+0x204>
 8002d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d7a:	d00c      	beq.n	8002d96 <UART_SetConfig+0x1fe>
 8002d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d80:	d003      	beq.n	8002d8a <UART_SetConfig+0x1f2>
 8002d82:	e00b      	b.n	8002d9c <UART_SetConfig+0x204>
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	e00e      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	77fb      	strb	r3, [r7, #31]
 8002d8e:	e00b      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d90:	2304      	movs	r3, #4
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	e008      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d96:	2308      	movs	r3, #8
 8002d98:	77fb      	strb	r3, [r7, #31]
 8002d9a:	e005      	b.n	8002da8 <UART_SetConfig+0x210>
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	bf00      	nop
 8002da2:	e001      	b.n	8002da8 <UART_SetConfig+0x210>
 8002da4:	2310      	movs	r3, #16
 8002da6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db0:	d15d      	bne.n	8002e6e <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d828      	bhi.n	8002e0a <UART_SetConfig+0x272>
 8002db8:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <UART_SetConfig+0x228>)
 8002dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbe:	bf00      	nop
 8002dc0:	08002de5 	.word	0x08002de5
 8002dc4:	08002ded 	.word	0x08002ded
 8002dc8:	08002df5 	.word	0x08002df5
 8002dcc:	08002e0b 	.word	0x08002e0b
 8002dd0:	08002dfb 	.word	0x08002dfb
 8002dd4:	08002e0b 	.word	0x08002e0b
 8002dd8:	08002e0b 	.word	0x08002e0b
 8002ddc:	08002e0b 	.word	0x08002e0b
 8002de0:	08002e03 	.word	0x08002e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de4:	f7ff f8d0 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8002de8:	61b8      	str	r0, [r7, #24]
        break;
 8002dea:	e013      	b.n	8002e14 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dec:	f7ff f8ee 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8002df0:	61b8      	str	r0, [r7, #24]
        break;
 8002df2:	e00f      	b.n	8002e14 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002df4:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <UART_SetConfig+0x348>)
 8002df6:	61bb      	str	r3, [r7, #24]
        break;
 8002df8:	e00c      	b.n	8002e14 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dfa:	f7ff f84f 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002dfe:	61b8      	str	r0, [r7, #24]
        break;
 8002e00:	e008      	b.n	8002e14 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e06:	61bb      	str	r3, [r7, #24]
        break;
 8002e08:	e004      	b.n	8002e14 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	77bb      	strb	r3, [r7, #30]
        break;
 8002e12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8085 	beq.w	8002f26 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	005a      	lsls	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	441a      	add	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	d916      	bls.n	8002e68 <UART_SetConfig+0x2d0>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d212      	bcs.n	8002e68 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f023 030f 	bic.w	r3, r3, #15
 8002e4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	89fb      	ldrh	r3, [r7, #14]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	89fa      	ldrh	r2, [r7, #14]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	e05e      	b.n	8002f26 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	77bb      	strb	r3, [r7, #30]
 8002e6c:	e05b      	b.n	8002f26 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d837      	bhi.n	8002ee4 <UART_SetConfig+0x34c>
 8002e74:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0x2e4>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ea9 	.word	0x08002ea9
 8002e84:	08002eb1 	.word	0x08002eb1
 8002e88:	08002ee5 	.word	0x08002ee5
 8002e8c:	08002eb7 	.word	0x08002eb7
 8002e90:	08002ee5 	.word	0x08002ee5
 8002e94:	08002ee5 	.word	0x08002ee5
 8002e98:	08002ee5 	.word	0x08002ee5
 8002e9c:	08002ebf 	.word	0x08002ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7ff f872 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	61b8      	str	r0, [r7, #24]
        break;
 8002ea6:	e022      	b.n	8002eee <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ea8:	f7ff f890 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8002eac:	61b8      	str	r0, [r7, #24]
        break;
 8002eae:	e01e      	b.n	8002eee <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <UART_SetConfig+0x348>)
 8002eb2:	61bb      	str	r3, [r7, #24]
        break;
 8002eb4:	e01b      	b.n	8002eee <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb6:	f7fe fff1 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002eba:	61b8      	str	r0, [r7, #24]
        break;
 8002ebc:	e017      	b.n	8002eee <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec2:	61bb      	str	r3, [r7, #24]
        break;
 8002ec4:	e013      	b.n	8002eee <UART_SetConfig+0x356>
 8002ec6:	bf00      	nop
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40004400 	.word	0x40004400
 8002ed4:	40004800 	.word	0x40004800
 8002ed8:	40004c00 	.word	0x40004c00
 8002edc:	40005000 	.word	0x40005000
 8002ee0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	77bb      	strb	r3, [r7, #30]
        break;
 8002eec:	bf00      	nop
    }

    if (pclk != 0U)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d018      	beq.n	8002f26 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	085a      	lsrs	r2, r3, #1
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b0f      	cmp	r3, #15
 8002f0e:	d908      	bls.n	8002f22 <UART_SetConfig+0x38a>
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f16:	d204      	bcs.n	8002f22 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	e001      	b.n	8002f26 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f32:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01a      	beq.n	8003052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303a:	d10a      	bne.n	8003052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003090:	f7fd fbf2 	bl	8000878 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d10e      	bne.n	80030c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f82d 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e023      	b.n	800310a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d10e      	bne.n	80030ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f817 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e00d      	b.n	800310a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	e05e      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d05a      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fd fba4 	bl	8000878 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <UART_WaitOnFlagUntilTimeout+0x30>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11b      	bne.n	800317a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003150:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e043      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02c      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003196:	d124      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e00f      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d091      	beq.n	8003124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <__errno>:
 800320c:	4b01      	ldr	r3, [pc, #4]	; (8003214 <__errno+0x8>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	2000000c 	.word	0x2000000c

08003218 <__libc_init_array>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4e0d      	ldr	r6, [pc, #52]	; (8003250 <__libc_init_array+0x38>)
 800321c:	4c0d      	ldr	r4, [pc, #52]	; (8003254 <__libc_init_array+0x3c>)
 800321e:	1ba4      	subs	r4, r4, r6
 8003220:	10a4      	asrs	r4, r4, #2
 8003222:	2500      	movs	r5, #0
 8003224:	42a5      	cmp	r5, r4
 8003226:	d109      	bne.n	800323c <__libc_init_array+0x24>
 8003228:	4e0b      	ldr	r6, [pc, #44]	; (8003258 <__libc_init_array+0x40>)
 800322a:	4c0c      	ldr	r4, [pc, #48]	; (800325c <__libc_init_array+0x44>)
 800322c:	f000 fc26 	bl	8003a7c <_init>
 8003230:	1ba4      	subs	r4, r4, r6
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	2500      	movs	r5, #0
 8003236:	42a5      	cmp	r5, r4
 8003238:	d105      	bne.n	8003246 <__libc_init_array+0x2e>
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003240:	4798      	blx	r3
 8003242:	3501      	adds	r5, #1
 8003244:	e7ee      	b.n	8003224 <__libc_init_array+0xc>
 8003246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324a:	4798      	blx	r3
 800324c:	3501      	adds	r5, #1
 800324e:	e7f2      	b.n	8003236 <__libc_init_array+0x1e>
 8003250:	08003b30 	.word	0x08003b30
 8003254:	08003b30 	.word	0x08003b30
 8003258:	08003b30 	.word	0x08003b30
 800325c:	08003b34 	.word	0x08003b34

08003260 <memset>:
 8003260:	4402      	add	r2, r0
 8003262:	4603      	mov	r3, r0
 8003264:	4293      	cmp	r3, r2
 8003266:	d100      	bne.n	800326a <memset+0xa>
 8003268:	4770      	bx	lr
 800326a:	f803 1b01 	strb.w	r1, [r3], #1
 800326e:	e7f9      	b.n	8003264 <memset+0x4>

08003270 <siprintf>:
 8003270:	b40e      	push	{r1, r2, r3}
 8003272:	b500      	push	{lr}
 8003274:	b09c      	sub	sp, #112	; 0x70
 8003276:	ab1d      	add	r3, sp, #116	; 0x74
 8003278:	9002      	str	r0, [sp, #8]
 800327a:	9006      	str	r0, [sp, #24]
 800327c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003280:	4809      	ldr	r0, [pc, #36]	; (80032a8 <siprintf+0x38>)
 8003282:	9107      	str	r1, [sp, #28]
 8003284:	9104      	str	r1, [sp, #16]
 8003286:	4909      	ldr	r1, [pc, #36]	; (80032ac <siprintf+0x3c>)
 8003288:	f853 2b04 	ldr.w	r2, [r3], #4
 800328c:	9105      	str	r1, [sp, #20]
 800328e:	6800      	ldr	r0, [r0, #0]
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	a902      	add	r1, sp, #8
 8003294:	f000 f866 	bl	8003364 <_svfiprintf_r>
 8003298:	9b02      	ldr	r3, [sp, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	b01c      	add	sp, #112	; 0x70
 80032a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a4:	b003      	add	sp, #12
 80032a6:	4770      	bx	lr
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	ffff0208 	.word	0xffff0208

080032b0 <__ssputs_r>:
 80032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	688e      	ldr	r6, [r1, #8]
 80032b6:	429e      	cmp	r6, r3
 80032b8:	4682      	mov	sl, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	4690      	mov	r8, r2
 80032be:	4699      	mov	r9, r3
 80032c0:	d837      	bhi.n	8003332 <__ssputs_r+0x82>
 80032c2:	898a      	ldrh	r2, [r1, #12]
 80032c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032c8:	d031      	beq.n	800332e <__ssputs_r+0x7e>
 80032ca:	6825      	ldr	r5, [r4, #0]
 80032cc:	6909      	ldr	r1, [r1, #16]
 80032ce:	1a6f      	subs	r7, r5, r1
 80032d0:	6965      	ldr	r5, [r4, #20]
 80032d2:	2302      	movs	r3, #2
 80032d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80032dc:	f109 0301 	add.w	r3, r9, #1
 80032e0:	443b      	add	r3, r7
 80032e2:	429d      	cmp	r5, r3
 80032e4:	bf38      	it	cc
 80032e6:	461d      	movcc	r5, r3
 80032e8:	0553      	lsls	r3, r2, #21
 80032ea:	d530      	bpl.n	800334e <__ssputs_r+0x9e>
 80032ec:	4629      	mov	r1, r5
 80032ee:	f000 fb2b 	bl	8003948 <_malloc_r>
 80032f2:	4606      	mov	r6, r0
 80032f4:	b950      	cbnz	r0, 800330c <__ssputs_r+0x5c>
 80032f6:	230c      	movs	r3, #12
 80032f8:	f8ca 3000 	str.w	r3, [sl]
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330c:	463a      	mov	r2, r7
 800330e:	6921      	ldr	r1, [r4, #16]
 8003310:	f000 faa8 	bl	8003864 <memcpy>
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800331a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331e:	81a3      	strh	r3, [r4, #12]
 8003320:	6126      	str	r6, [r4, #16]
 8003322:	6165      	str	r5, [r4, #20]
 8003324:	443e      	add	r6, r7
 8003326:	1bed      	subs	r5, r5, r7
 8003328:	6026      	str	r6, [r4, #0]
 800332a:	60a5      	str	r5, [r4, #8]
 800332c:	464e      	mov	r6, r9
 800332e:	454e      	cmp	r6, r9
 8003330:	d900      	bls.n	8003334 <__ssputs_r+0x84>
 8003332:	464e      	mov	r6, r9
 8003334:	4632      	mov	r2, r6
 8003336:	4641      	mov	r1, r8
 8003338:	6820      	ldr	r0, [r4, #0]
 800333a:	f000 fa9e 	bl	800387a <memmove>
 800333e:	68a3      	ldr	r3, [r4, #8]
 8003340:	1b9b      	subs	r3, r3, r6
 8003342:	60a3      	str	r3, [r4, #8]
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	441e      	add	r6, r3
 8003348:	6026      	str	r6, [r4, #0]
 800334a:	2000      	movs	r0, #0
 800334c:	e7dc      	b.n	8003308 <__ssputs_r+0x58>
 800334e:	462a      	mov	r2, r5
 8003350:	f000 fb54 	bl	80039fc <_realloc_r>
 8003354:	4606      	mov	r6, r0
 8003356:	2800      	cmp	r0, #0
 8003358:	d1e2      	bne.n	8003320 <__ssputs_r+0x70>
 800335a:	6921      	ldr	r1, [r4, #16]
 800335c:	4650      	mov	r0, sl
 800335e:	f000 faa5 	bl	80038ac <_free_r>
 8003362:	e7c8      	b.n	80032f6 <__ssputs_r+0x46>

08003364 <_svfiprintf_r>:
 8003364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003368:	461d      	mov	r5, r3
 800336a:	898b      	ldrh	r3, [r1, #12]
 800336c:	061f      	lsls	r7, r3, #24
 800336e:	b09d      	sub	sp, #116	; 0x74
 8003370:	4680      	mov	r8, r0
 8003372:	460c      	mov	r4, r1
 8003374:	4616      	mov	r6, r2
 8003376:	d50f      	bpl.n	8003398 <_svfiprintf_r+0x34>
 8003378:	690b      	ldr	r3, [r1, #16]
 800337a:	b96b      	cbnz	r3, 8003398 <_svfiprintf_r+0x34>
 800337c:	2140      	movs	r1, #64	; 0x40
 800337e:	f000 fae3 	bl	8003948 <_malloc_r>
 8003382:	6020      	str	r0, [r4, #0]
 8003384:	6120      	str	r0, [r4, #16]
 8003386:	b928      	cbnz	r0, 8003394 <_svfiprintf_r+0x30>
 8003388:	230c      	movs	r3, #12
 800338a:	f8c8 3000 	str.w	r3, [r8]
 800338e:	f04f 30ff 	mov.w	r0, #4294967295
 8003392:	e0c8      	b.n	8003526 <_svfiprintf_r+0x1c2>
 8003394:	2340      	movs	r3, #64	; 0x40
 8003396:	6163      	str	r3, [r4, #20]
 8003398:	2300      	movs	r3, #0
 800339a:	9309      	str	r3, [sp, #36]	; 0x24
 800339c:	2320      	movs	r3, #32
 800339e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a2:	2330      	movs	r3, #48	; 0x30
 80033a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033a8:	9503      	str	r5, [sp, #12]
 80033aa:	f04f 0b01 	mov.w	fp, #1
 80033ae:	4637      	mov	r7, r6
 80033b0:	463d      	mov	r5, r7
 80033b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80033b6:	b10b      	cbz	r3, 80033bc <_svfiprintf_r+0x58>
 80033b8:	2b25      	cmp	r3, #37	; 0x25
 80033ba:	d13e      	bne.n	800343a <_svfiprintf_r+0xd6>
 80033bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80033c0:	d00b      	beq.n	80033da <_svfiprintf_r+0x76>
 80033c2:	4653      	mov	r3, sl
 80033c4:	4632      	mov	r2, r6
 80033c6:	4621      	mov	r1, r4
 80033c8:	4640      	mov	r0, r8
 80033ca:	f7ff ff71 	bl	80032b0 <__ssputs_r>
 80033ce:	3001      	adds	r0, #1
 80033d0:	f000 80a4 	beq.w	800351c <_svfiprintf_r+0x1b8>
 80033d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d6:	4453      	add	r3, sl
 80033d8:	9309      	str	r3, [sp, #36]	; 0x24
 80033da:	783b      	ldrb	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 809d 	beq.w	800351c <_svfiprintf_r+0x1b8>
 80033e2:	2300      	movs	r3, #0
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295
 80033e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ec:	9304      	str	r3, [sp, #16]
 80033ee:	9307      	str	r3, [sp, #28]
 80033f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033f4:	931a      	str	r3, [sp, #104]	; 0x68
 80033f6:	462f      	mov	r7, r5
 80033f8:	2205      	movs	r2, #5
 80033fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033fe:	4850      	ldr	r0, [pc, #320]	; (8003540 <_svfiprintf_r+0x1dc>)
 8003400:	f7fc fee6 	bl	80001d0 <memchr>
 8003404:	9b04      	ldr	r3, [sp, #16]
 8003406:	b9d0      	cbnz	r0, 800343e <_svfiprintf_r+0xda>
 8003408:	06d9      	lsls	r1, r3, #27
 800340a:	bf44      	itt	mi
 800340c:	2220      	movmi	r2, #32
 800340e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003412:	071a      	lsls	r2, r3, #28
 8003414:	bf44      	itt	mi
 8003416:	222b      	movmi	r2, #43	; 0x2b
 8003418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800341c:	782a      	ldrb	r2, [r5, #0]
 800341e:	2a2a      	cmp	r2, #42	; 0x2a
 8003420:	d015      	beq.n	800344e <_svfiprintf_r+0xea>
 8003422:	9a07      	ldr	r2, [sp, #28]
 8003424:	462f      	mov	r7, r5
 8003426:	2000      	movs	r0, #0
 8003428:	250a      	movs	r5, #10
 800342a:	4639      	mov	r1, r7
 800342c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003430:	3b30      	subs	r3, #48	; 0x30
 8003432:	2b09      	cmp	r3, #9
 8003434:	d94d      	bls.n	80034d2 <_svfiprintf_r+0x16e>
 8003436:	b1b8      	cbz	r0, 8003468 <_svfiprintf_r+0x104>
 8003438:	e00f      	b.n	800345a <_svfiprintf_r+0xf6>
 800343a:	462f      	mov	r7, r5
 800343c:	e7b8      	b.n	80033b0 <_svfiprintf_r+0x4c>
 800343e:	4a40      	ldr	r2, [pc, #256]	; (8003540 <_svfiprintf_r+0x1dc>)
 8003440:	1a80      	subs	r0, r0, r2
 8003442:	fa0b f000 	lsl.w	r0, fp, r0
 8003446:	4318      	orrs	r0, r3
 8003448:	9004      	str	r0, [sp, #16]
 800344a:	463d      	mov	r5, r7
 800344c:	e7d3      	b.n	80033f6 <_svfiprintf_r+0x92>
 800344e:	9a03      	ldr	r2, [sp, #12]
 8003450:	1d11      	adds	r1, r2, #4
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	9103      	str	r1, [sp, #12]
 8003456:	2a00      	cmp	r2, #0
 8003458:	db01      	blt.n	800345e <_svfiprintf_r+0xfa>
 800345a:	9207      	str	r2, [sp, #28]
 800345c:	e004      	b.n	8003468 <_svfiprintf_r+0x104>
 800345e:	4252      	negs	r2, r2
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	9207      	str	r2, [sp, #28]
 8003466:	9304      	str	r3, [sp, #16]
 8003468:	783b      	ldrb	r3, [r7, #0]
 800346a:	2b2e      	cmp	r3, #46	; 0x2e
 800346c:	d10c      	bne.n	8003488 <_svfiprintf_r+0x124>
 800346e:	787b      	ldrb	r3, [r7, #1]
 8003470:	2b2a      	cmp	r3, #42	; 0x2a
 8003472:	d133      	bne.n	80034dc <_svfiprintf_r+0x178>
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	9203      	str	r2, [sp, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	bfb8      	it	lt
 8003480:	f04f 33ff 	movlt.w	r3, #4294967295
 8003484:	3702      	adds	r7, #2
 8003486:	9305      	str	r3, [sp, #20]
 8003488:	4d2e      	ldr	r5, [pc, #184]	; (8003544 <_svfiprintf_r+0x1e0>)
 800348a:	7839      	ldrb	r1, [r7, #0]
 800348c:	2203      	movs	r2, #3
 800348e:	4628      	mov	r0, r5
 8003490:	f7fc fe9e 	bl	80001d0 <memchr>
 8003494:	b138      	cbz	r0, 80034a6 <_svfiprintf_r+0x142>
 8003496:	2340      	movs	r3, #64	; 0x40
 8003498:	1b40      	subs	r0, r0, r5
 800349a:	fa03 f000 	lsl.w	r0, r3, r0
 800349e:	9b04      	ldr	r3, [sp, #16]
 80034a0:	4303      	orrs	r3, r0
 80034a2:	3701      	adds	r7, #1
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	7839      	ldrb	r1, [r7, #0]
 80034a8:	4827      	ldr	r0, [pc, #156]	; (8003548 <_svfiprintf_r+0x1e4>)
 80034aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ae:	2206      	movs	r2, #6
 80034b0:	1c7e      	adds	r6, r7, #1
 80034b2:	f7fc fe8d 	bl	80001d0 <memchr>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d038      	beq.n	800352c <_svfiprintf_r+0x1c8>
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <_svfiprintf_r+0x1e8>)
 80034bc:	bb13      	cbnz	r3, 8003504 <_svfiprintf_r+0x1a0>
 80034be:	9b03      	ldr	r3, [sp, #12]
 80034c0:	3307      	adds	r3, #7
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	3308      	adds	r3, #8
 80034c8:	9303      	str	r3, [sp, #12]
 80034ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034cc:	444b      	add	r3, r9
 80034ce:	9309      	str	r3, [sp, #36]	; 0x24
 80034d0:	e76d      	b.n	80033ae <_svfiprintf_r+0x4a>
 80034d2:	fb05 3202 	mla	r2, r5, r2, r3
 80034d6:	2001      	movs	r0, #1
 80034d8:	460f      	mov	r7, r1
 80034da:	e7a6      	b.n	800342a <_svfiprintf_r+0xc6>
 80034dc:	2300      	movs	r3, #0
 80034de:	3701      	adds	r7, #1
 80034e0:	9305      	str	r3, [sp, #20]
 80034e2:	4619      	mov	r1, r3
 80034e4:	250a      	movs	r5, #10
 80034e6:	4638      	mov	r0, r7
 80034e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ec:	3a30      	subs	r2, #48	; 0x30
 80034ee:	2a09      	cmp	r2, #9
 80034f0:	d903      	bls.n	80034fa <_svfiprintf_r+0x196>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0c8      	beq.n	8003488 <_svfiprintf_r+0x124>
 80034f6:	9105      	str	r1, [sp, #20]
 80034f8:	e7c6      	b.n	8003488 <_svfiprintf_r+0x124>
 80034fa:	fb05 2101 	mla	r1, r5, r1, r2
 80034fe:	2301      	movs	r3, #1
 8003500:	4607      	mov	r7, r0
 8003502:	e7f0      	b.n	80034e6 <_svfiprintf_r+0x182>
 8003504:	ab03      	add	r3, sp, #12
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4622      	mov	r2, r4
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <_svfiprintf_r+0x1ec>)
 800350c:	a904      	add	r1, sp, #16
 800350e:	4640      	mov	r0, r8
 8003510:	f3af 8000 	nop.w
 8003514:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003518:	4681      	mov	r9, r0
 800351a:	d1d6      	bne.n	80034ca <_svfiprintf_r+0x166>
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	065b      	lsls	r3, r3, #25
 8003520:	f53f af35 	bmi.w	800338e <_svfiprintf_r+0x2a>
 8003524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003526:	b01d      	add	sp, #116	; 0x74
 8003528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352c:	ab03      	add	r3, sp, #12
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	4622      	mov	r2, r4
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <_svfiprintf_r+0x1ec>)
 8003534:	a904      	add	r1, sp, #16
 8003536:	4640      	mov	r0, r8
 8003538:	f000 f882 	bl	8003640 <_printf_i>
 800353c:	e7ea      	b.n	8003514 <_svfiprintf_r+0x1b0>
 800353e:	bf00      	nop
 8003540:	08003afc 	.word	0x08003afc
 8003544:	08003b02 	.word	0x08003b02
 8003548:	08003b06 	.word	0x08003b06
 800354c:	00000000 	.word	0x00000000
 8003550:	080032b1 	.word	0x080032b1

08003554 <_printf_common>:
 8003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	4691      	mov	r9, r2
 800355a:	461f      	mov	r7, r3
 800355c:	688a      	ldr	r2, [r1, #8]
 800355e:	690b      	ldr	r3, [r1, #16]
 8003560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003564:	4293      	cmp	r3, r2
 8003566:	bfb8      	it	lt
 8003568:	4613      	movlt	r3, r2
 800356a:	f8c9 3000 	str.w	r3, [r9]
 800356e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003572:	4606      	mov	r6, r0
 8003574:	460c      	mov	r4, r1
 8003576:	b112      	cbz	r2, 800357e <_printf_common+0x2a>
 8003578:	3301      	adds	r3, #1
 800357a:	f8c9 3000 	str.w	r3, [r9]
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	0699      	lsls	r1, r3, #26
 8003582:	bf42      	ittt	mi
 8003584:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003588:	3302      	addmi	r3, #2
 800358a:	f8c9 3000 	strmi.w	r3, [r9]
 800358e:	6825      	ldr	r5, [r4, #0]
 8003590:	f015 0506 	ands.w	r5, r5, #6
 8003594:	d107      	bne.n	80035a6 <_printf_common+0x52>
 8003596:	f104 0a19 	add.w	sl, r4, #25
 800359a:	68e3      	ldr	r3, [r4, #12]
 800359c:	f8d9 2000 	ldr.w	r2, [r9]
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	42ab      	cmp	r3, r5
 80035a4:	dc28      	bgt.n	80035f8 <_printf_common+0xa4>
 80035a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	3300      	adds	r3, #0
 80035ae:	bf18      	it	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	0692      	lsls	r2, r2, #26
 80035b4:	d42d      	bmi.n	8003612 <_printf_common+0xbe>
 80035b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035ba:	4639      	mov	r1, r7
 80035bc:	4630      	mov	r0, r6
 80035be:	47c0      	blx	r8
 80035c0:	3001      	adds	r0, #1
 80035c2:	d020      	beq.n	8003606 <_printf_common+0xb2>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	68e5      	ldr	r5, [r4, #12]
 80035c8:	f8d9 2000 	ldr.w	r2, [r9]
 80035cc:	f003 0306 	and.w	r3, r3, #6
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	bf08      	it	eq
 80035d4:	1aad      	subeq	r5, r5, r2
 80035d6:	68a3      	ldr	r3, [r4, #8]
 80035d8:	6922      	ldr	r2, [r4, #16]
 80035da:	bf0c      	ite	eq
 80035dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e0:	2500      	movne	r5, #0
 80035e2:	4293      	cmp	r3, r2
 80035e4:	bfc4      	itt	gt
 80035e6:	1a9b      	subgt	r3, r3, r2
 80035e8:	18ed      	addgt	r5, r5, r3
 80035ea:	f04f 0900 	mov.w	r9, #0
 80035ee:	341a      	adds	r4, #26
 80035f0:	454d      	cmp	r5, r9
 80035f2:	d11a      	bne.n	800362a <_printf_common+0xd6>
 80035f4:	2000      	movs	r0, #0
 80035f6:	e008      	b.n	800360a <_printf_common+0xb6>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4652      	mov	r2, sl
 80035fc:	4639      	mov	r1, r7
 80035fe:	4630      	mov	r0, r6
 8003600:	47c0      	blx	r8
 8003602:	3001      	adds	r0, #1
 8003604:	d103      	bne.n	800360e <_printf_common+0xba>
 8003606:	f04f 30ff 	mov.w	r0, #4294967295
 800360a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360e:	3501      	adds	r5, #1
 8003610:	e7c3      	b.n	800359a <_printf_common+0x46>
 8003612:	18e1      	adds	r1, r4, r3
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	2030      	movs	r0, #48	; 0x30
 8003618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800361c:	4422      	add	r2, r4
 800361e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003622:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003626:	3302      	adds	r3, #2
 8003628:	e7c5      	b.n	80035b6 <_printf_common+0x62>
 800362a:	2301      	movs	r3, #1
 800362c:	4622      	mov	r2, r4
 800362e:	4639      	mov	r1, r7
 8003630:	4630      	mov	r0, r6
 8003632:	47c0      	blx	r8
 8003634:	3001      	adds	r0, #1
 8003636:	d0e6      	beq.n	8003606 <_printf_common+0xb2>
 8003638:	f109 0901 	add.w	r9, r9, #1
 800363c:	e7d8      	b.n	80035f0 <_printf_common+0x9c>
	...

08003640 <_printf_i>:
 8003640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003644:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003648:	460c      	mov	r4, r1
 800364a:	7e09      	ldrb	r1, [r1, #24]
 800364c:	b085      	sub	sp, #20
 800364e:	296e      	cmp	r1, #110	; 0x6e
 8003650:	4617      	mov	r7, r2
 8003652:	4606      	mov	r6, r0
 8003654:	4698      	mov	r8, r3
 8003656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003658:	f000 80b3 	beq.w	80037c2 <_printf_i+0x182>
 800365c:	d822      	bhi.n	80036a4 <_printf_i+0x64>
 800365e:	2963      	cmp	r1, #99	; 0x63
 8003660:	d036      	beq.n	80036d0 <_printf_i+0x90>
 8003662:	d80a      	bhi.n	800367a <_printf_i+0x3a>
 8003664:	2900      	cmp	r1, #0
 8003666:	f000 80b9 	beq.w	80037dc <_printf_i+0x19c>
 800366a:	2958      	cmp	r1, #88	; 0x58
 800366c:	f000 8083 	beq.w	8003776 <_printf_i+0x136>
 8003670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003674:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003678:	e032      	b.n	80036e0 <_printf_i+0xa0>
 800367a:	2964      	cmp	r1, #100	; 0x64
 800367c:	d001      	beq.n	8003682 <_printf_i+0x42>
 800367e:	2969      	cmp	r1, #105	; 0x69
 8003680:	d1f6      	bne.n	8003670 <_printf_i+0x30>
 8003682:	6820      	ldr	r0, [r4, #0]
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	0605      	lsls	r5, r0, #24
 8003688:	f103 0104 	add.w	r1, r3, #4
 800368c:	d52a      	bpl.n	80036e4 <_printf_i+0xa4>
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6011      	str	r1, [r2, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	da03      	bge.n	800369e <_printf_i+0x5e>
 8003696:	222d      	movs	r2, #45	; 0x2d
 8003698:	425b      	negs	r3, r3
 800369a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800369e:	486f      	ldr	r0, [pc, #444]	; (800385c <_printf_i+0x21c>)
 80036a0:	220a      	movs	r2, #10
 80036a2:	e039      	b.n	8003718 <_printf_i+0xd8>
 80036a4:	2973      	cmp	r1, #115	; 0x73
 80036a6:	f000 809d 	beq.w	80037e4 <_printf_i+0x1a4>
 80036aa:	d808      	bhi.n	80036be <_printf_i+0x7e>
 80036ac:	296f      	cmp	r1, #111	; 0x6f
 80036ae:	d020      	beq.n	80036f2 <_printf_i+0xb2>
 80036b0:	2970      	cmp	r1, #112	; 0x70
 80036b2:	d1dd      	bne.n	8003670 <_printf_i+0x30>
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	f043 0320 	orr.w	r3, r3, #32
 80036ba:	6023      	str	r3, [r4, #0]
 80036bc:	e003      	b.n	80036c6 <_printf_i+0x86>
 80036be:	2975      	cmp	r1, #117	; 0x75
 80036c0:	d017      	beq.n	80036f2 <_printf_i+0xb2>
 80036c2:	2978      	cmp	r1, #120	; 0x78
 80036c4:	d1d4      	bne.n	8003670 <_printf_i+0x30>
 80036c6:	2378      	movs	r3, #120	; 0x78
 80036c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036cc:	4864      	ldr	r0, [pc, #400]	; (8003860 <_printf_i+0x220>)
 80036ce:	e055      	b.n	800377c <_printf_i+0x13c>
 80036d0:	6813      	ldr	r3, [r2, #0]
 80036d2:	1d19      	adds	r1, r3, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6011      	str	r1, [r2, #0]
 80036d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e0:	2301      	movs	r3, #1
 80036e2:	e08c      	b.n	80037fe <_printf_i+0x1be>
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6011      	str	r1, [r2, #0]
 80036e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036ec:	bf18      	it	ne
 80036ee:	b21b      	sxthne	r3, r3
 80036f0:	e7cf      	b.n	8003692 <_printf_i+0x52>
 80036f2:	6813      	ldr	r3, [r2, #0]
 80036f4:	6825      	ldr	r5, [r4, #0]
 80036f6:	1d18      	adds	r0, r3, #4
 80036f8:	6010      	str	r0, [r2, #0]
 80036fa:	0628      	lsls	r0, r5, #24
 80036fc:	d501      	bpl.n	8003702 <_printf_i+0xc2>
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	e002      	b.n	8003708 <_printf_i+0xc8>
 8003702:	0668      	lsls	r0, r5, #25
 8003704:	d5fb      	bpl.n	80036fe <_printf_i+0xbe>
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	4854      	ldr	r0, [pc, #336]	; (800385c <_printf_i+0x21c>)
 800370a:	296f      	cmp	r1, #111	; 0x6f
 800370c:	bf14      	ite	ne
 800370e:	220a      	movne	r2, #10
 8003710:	2208      	moveq	r2, #8
 8003712:	2100      	movs	r1, #0
 8003714:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003718:	6865      	ldr	r5, [r4, #4]
 800371a:	60a5      	str	r5, [r4, #8]
 800371c:	2d00      	cmp	r5, #0
 800371e:	f2c0 8095 	blt.w	800384c <_printf_i+0x20c>
 8003722:	6821      	ldr	r1, [r4, #0]
 8003724:	f021 0104 	bic.w	r1, r1, #4
 8003728:	6021      	str	r1, [r4, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d13d      	bne.n	80037aa <_printf_i+0x16a>
 800372e:	2d00      	cmp	r5, #0
 8003730:	f040 808e 	bne.w	8003850 <_printf_i+0x210>
 8003734:	4665      	mov	r5, ip
 8003736:	2a08      	cmp	r2, #8
 8003738:	d10b      	bne.n	8003752 <_printf_i+0x112>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	07db      	lsls	r3, r3, #31
 800373e:	d508      	bpl.n	8003752 <_printf_i+0x112>
 8003740:	6923      	ldr	r3, [r4, #16]
 8003742:	6862      	ldr	r2, [r4, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	bfde      	ittt	le
 8003748:	2330      	movle	r3, #48	; 0x30
 800374a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800374e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003752:	ebac 0305 	sub.w	r3, ip, r5
 8003756:	6123      	str	r3, [r4, #16]
 8003758:	f8cd 8000 	str.w	r8, [sp]
 800375c:	463b      	mov	r3, r7
 800375e:	aa03      	add	r2, sp, #12
 8003760:	4621      	mov	r1, r4
 8003762:	4630      	mov	r0, r6
 8003764:	f7ff fef6 	bl	8003554 <_printf_common>
 8003768:	3001      	adds	r0, #1
 800376a:	d14d      	bne.n	8003808 <_printf_i+0x1c8>
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	b005      	add	sp, #20
 8003772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003776:	4839      	ldr	r0, [pc, #228]	; (800385c <_printf_i+0x21c>)
 8003778:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800377c:	6813      	ldr	r3, [r2, #0]
 800377e:	6821      	ldr	r1, [r4, #0]
 8003780:	1d1d      	adds	r5, r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6015      	str	r5, [r2, #0]
 8003786:	060a      	lsls	r2, r1, #24
 8003788:	d50b      	bpl.n	80037a2 <_printf_i+0x162>
 800378a:	07ca      	lsls	r2, r1, #31
 800378c:	bf44      	itt	mi
 800378e:	f041 0120 	orrmi.w	r1, r1, #32
 8003792:	6021      	strmi	r1, [r4, #0]
 8003794:	b91b      	cbnz	r3, 800379e <_printf_i+0x15e>
 8003796:	6822      	ldr	r2, [r4, #0]
 8003798:	f022 0220 	bic.w	r2, r2, #32
 800379c:	6022      	str	r2, [r4, #0]
 800379e:	2210      	movs	r2, #16
 80037a0:	e7b7      	b.n	8003712 <_printf_i+0xd2>
 80037a2:	064d      	lsls	r5, r1, #25
 80037a4:	bf48      	it	mi
 80037a6:	b29b      	uxthmi	r3, r3
 80037a8:	e7ef      	b.n	800378a <_printf_i+0x14a>
 80037aa:	4665      	mov	r5, ip
 80037ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80037b0:	fb02 3311 	mls	r3, r2, r1, r3
 80037b4:	5cc3      	ldrb	r3, [r0, r3]
 80037b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037ba:	460b      	mov	r3, r1
 80037bc:	2900      	cmp	r1, #0
 80037be:	d1f5      	bne.n	80037ac <_printf_i+0x16c>
 80037c0:	e7b9      	b.n	8003736 <_printf_i+0xf6>
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	6825      	ldr	r5, [r4, #0]
 80037c6:	6961      	ldr	r1, [r4, #20]
 80037c8:	1d18      	adds	r0, r3, #4
 80037ca:	6010      	str	r0, [r2, #0]
 80037cc:	0628      	lsls	r0, r5, #24
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	d501      	bpl.n	80037d6 <_printf_i+0x196>
 80037d2:	6019      	str	r1, [r3, #0]
 80037d4:	e002      	b.n	80037dc <_printf_i+0x19c>
 80037d6:	066a      	lsls	r2, r5, #25
 80037d8:	d5fb      	bpl.n	80037d2 <_printf_i+0x192>
 80037da:	8019      	strh	r1, [r3, #0]
 80037dc:	2300      	movs	r3, #0
 80037de:	6123      	str	r3, [r4, #16]
 80037e0:	4665      	mov	r5, ip
 80037e2:	e7b9      	b.n	8003758 <_printf_i+0x118>
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	1d19      	adds	r1, r3, #4
 80037e8:	6011      	str	r1, [r2, #0]
 80037ea:	681d      	ldr	r5, [r3, #0]
 80037ec:	6862      	ldr	r2, [r4, #4]
 80037ee:	2100      	movs	r1, #0
 80037f0:	4628      	mov	r0, r5
 80037f2:	f7fc fced 	bl	80001d0 <memchr>
 80037f6:	b108      	cbz	r0, 80037fc <_printf_i+0x1bc>
 80037f8:	1b40      	subs	r0, r0, r5
 80037fa:	6060      	str	r0, [r4, #4]
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	6123      	str	r3, [r4, #16]
 8003800:	2300      	movs	r3, #0
 8003802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003806:	e7a7      	b.n	8003758 <_printf_i+0x118>
 8003808:	6923      	ldr	r3, [r4, #16]
 800380a:	462a      	mov	r2, r5
 800380c:	4639      	mov	r1, r7
 800380e:	4630      	mov	r0, r6
 8003810:	47c0      	blx	r8
 8003812:	3001      	adds	r0, #1
 8003814:	d0aa      	beq.n	800376c <_printf_i+0x12c>
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	079b      	lsls	r3, r3, #30
 800381a:	d413      	bmi.n	8003844 <_printf_i+0x204>
 800381c:	68e0      	ldr	r0, [r4, #12]
 800381e:	9b03      	ldr	r3, [sp, #12]
 8003820:	4298      	cmp	r0, r3
 8003822:	bfb8      	it	lt
 8003824:	4618      	movlt	r0, r3
 8003826:	e7a3      	b.n	8003770 <_printf_i+0x130>
 8003828:	2301      	movs	r3, #1
 800382a:	464a      	mov	r2, r9
 800382c:	4639      	mov	r1, r7
 800382e:	4630      	mov	r0, r6
 8003830:	47c0      	blx	r8
 8003832:	3001      	adds	r0, #1
 8003834:	d09a      	beq.n	800376c <_printf_i+0x12c>
 8003836:	3501      	adds	r5, #1
 8003838:	68e3      	ldr	r3, [r4, #12]
 800383a:	9a03      	ldr	r2, [sp, #12]
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	42ab      	cmp	r3, r5
 8003840:	dcf2      	bgt.n	8003828 <_printf_i+0x1e8>
 8003842:	e7eb      	b.n	800381c <_printf_i+0x1dc>
 8003844:	2500      	movs	r5, #0
 8003846:	f104 0919 	add.w	r9, r4, #25
 800384a:	e7f5      	b.n	8003838 <_printf_i+0x1f8>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ac      	bne.n	80037aa <_printf_i+0x16a>
 8003850:	7803      	ldrb	r3, [r0, #0]
 8003852:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003856:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800385a:	e76c      	b.n	8003736 <_printf_i+0xf6>
 800385c:	08003b0d 	.word	0x08003b0d
 8003860:	08003b1e 	.word	0x08003b1e

08003864 <memcpy>:
 8003864:	b510      	push	{r4, lr}
 8003866:	1e43      	subs	r3, r0, #1
 8003868:	440a      	add	r2, r1
 800386a:	4291      	cmp	r1, r2
 800386c:	d100      	bne.n	8003870 <memcpy+0xc>
 800386e:	bd10      	pop	{r4, pc}
 8003870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003878:	e7f7      	b.n	800386a <memcpy+0x6>

0800387a <memmove>:
 800387a:	4288      	cmp	r0, r1
 800387c:	b510      	push	{r4, lr}
 800387e:	eb01 0302 	add.w	r3, r1, r2
 8003882:	d807      	bhi.n	8003894 <memmove+0x1a>
 8003884:	1e42      	subs	r2, r0, #1
 8003886:	4299      	cmp	r1, r3
 8003888:	d00a      	beq.n	80038a0 <memmove+0x26>
 800388a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800388e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003892:	e7f8      	b.n	8003886 <memmove+0xc>
 8003894:	4283      	cmp	r3, r0
 8003896:	d9f5      	bls.n	8003884 <memmove+0xa>
 8003898:	1881      	adds	r1, r0, r2
 800389a:	1ad2      	subs	r2, r2, r3
 800389c:	42d3      	cmn	r3, r2
 800389e:	d100      	bne.n	80038a2 <memmove+0x28>
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80038aa:	e7f7      	b.n	800389c <memmove+0x22>

080038ac <_free_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4605      	mov	r5, r0
 80038b0:	2900      	cmp	r1, #0
 80038b2:	d045      	beq.n	8003940 <_free_r+0x94>
 80038b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b8:	1f0c      	subs	r4, r1, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bfb8      	it	lt
 80038be:	18e4      	addlt	r4, r4, r3
 80038c0:	f000 f8d2 	bl	8003a68 <__malloc_lock>
 80038c4:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <_free_r+0x98>)
 80038c6:	6813      	ldr	r3, [r2, #0]
 80038c8:	4610      	mov	r0, r2
 80038ca:	b933      	cbnz	r3, 80038da <_free_r+0x2e>
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	6014      	str	r4, [r2, #0]
 80038d0:	4628      	mov	r0, r5
 80038d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038d6:	f000 b8c8 	b.w	8003a6a <__malloc_unlock>
 80038da:	42a3      	cmp	r3, r4
 80038dc:	d90c      	bls.n	80038f8 <_free_r+0x4c>
 80038de:	6821      	ldr	r1, [r4, #0]
 80038e0:	1862      	adds	r2, r4, r1
 80038e2:	4293      	cmp	r3, r2
 80038e4:	bf04      	itt	eq
 80038e6:	681a      	ldreq	r2, [r3, #0]
 80038e8:	685b      	ldreq	r3, [r3, #4]
 80038ea:	6063      	str	r3, [r4, #4]
 80038ec:	bf04      	itt	eq
 80038ee:	1852      	addeq	r2, r2, r1
 80038f0:	6022      	streq	r2, [r4, #0]
 80038f2:	6004      	str	r4, [r0, #0]
 80038f4:	e7ec      	b.n	80038d0 <_free_r+0x24>
 80038f6:	4613      	mov	r3, r2
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	b10a      	cbz	r2, 8003900 <_free_r+0x54>
 80038fc:	42a2      	cmp	r2, r4
 80038fe:	d9fa      	bls.n	80038f6 <_free_r+0x4a>
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	1858      	adds	r0, r3, r1
 8003904:	42a0      	cmp	r0, r4
 8003906:	d10b      	bne.n	8003920 <_free_r+0x74>
 8003908:	6820      	ldr	r0, [r4, #0]
 800390a:	4401      	add	r1, r0
 800390c:	1858      	adds	r0, r3, r1
 800390e:	4282      	cmp	r2, r0
 8003910:	6019      	str	r1, [r3, #0]
 8003912:	d1dd      	bne.n	80038d0 <_free_r+0x24>
 8003914:	6810      	ldr	r0, [r2, #0]
 8003916:	6852      	ldr	r2, [r2, #4]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	4401      	add	r1, r0
 800391c:	6019      	str	r1, [r3, #0]
 800391e:	e7d7      	b.n	80038d0 <_free_r+0x24>
 8003920:	d902      	bls.n	8003928 <_free_r+0x7c>
 8003922:	230c      	movs	r3, #12
 8003924:	602b      	str	r3, [r5, #0]
 8003926:	e7d3      	b.n	80038d0 <_free_r+0x24>
 8003928:	6820      	ldr	r0, [r4, #0]
 800392a:	1821      	adds	r1, r4, r0
 800392c:	428a      	cmp	r2, r1
 800392e:	bf04      	itt	eq
 8003930:	6811      	ldreq	r1, [r2, #0]
 8003932:	6852      	ldreq	r2, [r2, #4]
 8003934:	6062      	str	r2, [r4, #4]
 8003936:	bf04      	itt	eq
 8003938:	1809      	addeq	r1, r1, r0
 800393a:	6021      	streq	r1, [r4, #0]
 800393c:	605c      	str	r4, [r3, #4]
 800393e:	e7c7      	b.n	80038d0 <_free_r+0x24>
 8003940:	bd38      	pop	{r3, r4, r5, pc}
 8003942:	bf00      	nop
 8003944:	20000090 	.word	0x20000090

08003948 <_malloc_r>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	1ccd      	adds	r5, r1, #3
 800394c:	f025 0503 	bic.w	r5, r5, #3
 8003950:	3508      	adds	r5, #8
 8003952:	2d0c      	cmp	r5, #12
 8003954:	bf38      	it	cc
 8003956:	250c      	movcc	r5, #12
 8003958:	2d00      	cmp	r5, #0
 800395a:	4606      	mov	r6, r0
 800395c:	db01      	blt.n	8003962 <_malloc_r+0x1a>
 800395e:	42a9      	cmp	r1, r5
 8003960:	d903      	bls.n	800396a <_malloc_r+0x22>
 8003962:	230c      	movs	r3, #12
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	2000      	movs	r0, #0
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	f000 f87d 	bl	8003a68 <__malloc_lock>
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <_malloc_r+0xac>)
 8003970:	6814      	ldr	r4, [r2, #0]
 8003972:	4621      	mov	r1, r4
 8003974:	b991      	cbnz	r1, 800399c <_malloc_r+0x54>
 8003976:	4c20      	ldr	r4, [pc, #128]	; (80039f8 <_malloc_r+0xb0>)
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	b91b      	cbnz	r3, 8003984 <_malloc_r+0x3c>
 800397c:	4630      	mov	r0, r6
 800397e:	f000 f863 	bl	8003a48 <_sbrk_r>
 8003982:	6020      	str	r0, [r4, #0]
 8003984:	4629      	mov	r1, r5
 8003986:	4630      	mov	r0, r6
 8003988:	f000 f85e 	bl	8003a48 <_sbrk_r>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d124      	bne.n	80039da <_malloc_r+0x92>
 8003990:	230c      	movs	r3, #12
 8003992:	6033      	str	r3, [r6, #0]
 8003994:	4630      	mov	r0, r6
 8003996:	f000 f868 	bl	8003a6a <__malloc_unlock>
 800399a:	e7e4      	b.n	8003966 <_malloc_r+0x1e>
 800399c:	680b      	ldr	r3, [r1, #0]
 800399e:	1b5b      	subs	r3, r3, r5
 80039a0:	d418      	bmi.n	80039d4 <_malloc_r+0x8c>
 80039a2:	2b0b      	cmp	r3, #11
 80039a4:	d90f      	bls.n	80039c6 <_malloc_r+0x7e>
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	50cd      	str	r5, [r1, r3]
 80039aa:	18cc      	adds	r4, r1, r3
 80039ac:	4630      	mov	r0, r6
 80039ae:	f000 f85c 	bl	8003a6a <__malloc_unlock>
 80039b2:	f104 000b 	add.w	r0, r4, #11
 80039b6:	1d23      	adds	r3, r4, #4
 80039b8:	f020 0007 	bic.w	r0, r0, #7
 80039bc:	1ac3      	subs	r3, r0, r3
 80039be:	d0d3      	beq.n	8003968 <_malloc_r+0x20>
 80039c0:	425a      	negs	r2, r3
 80039c2:	50e2      	str	r2, [r4, r3]
 80039c4:	e7d0      	b.n	8003968 <_malloc_r+0x20>
 80039c6:	428c      	cmp	r4, r1
 80039c8:	684b      	ldr	r3, [r1, #4]
 80039ca:	bf16      	itet	ne
 80039cc:	6063      	strne	r3, [r4, #4]
 80039ce:	6013      	streq	r3, [r2, #0]
 80039d0:	460c      	movne	r4, r1
 80039d2:	e7eb      	b.n	80039ac <_malloc_r+0x64>
 80039d4:	460c      	mov	r4, r1
 80039d6:	6849      	ldr	r1, [r1, #4]
 80039d8:	e7cc      	b.n	8003974 <_malloc_r+0x2c>
 80039da:	1cc4      	adds	r4, r0, #3
 80039dc:	f024 0403 	bic.w	r4, r4, #3
 80039e0:	42a0      	cmp	r0, r4
 80039e2:	d005      	beq.n	80039f0 <_malloc_r+0xa8>
 80039e4:	1a21      	subs	r1, r4, r0
 80039e6:	4630      	mov	r0, r6
 80039e8:	f000 f82e 	bl	8003a48 <_sbrk_r>
 80039ec:	3001      	adds	r0, #1
 80039ee:	d0cf      	beq.n	8003990 <_malloc_r+0x48>
 80039f0:	6025      	str	r5, [r4, #0]
 80039f2:	e7db      	b.n	80039ac <_malloc_r+0x64>
 80039f4:	20000090 	.word	0x20000090
 80039f8:	20000094 	.word	0x20000094

080039fc <_realloc_r>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	4607      	mov	r7, r0
 8003a00:	4614      	mov	r4, r2
 8003a02:	460e      	mov	r6, r1
 8003a04:	b921      	cbnz	r1, 8003a10 <_realloc_r+0x14>
 8003a06:	4611      	mov	r1, r2
 8003a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a0c:	f7ff bf9c 	b.w	8003948 <_malloc_r>
 8003a10:	b922      	cbnz	r2, 8003a1c <_realloc_r+0x20>
 8003a12:	f7ff ff4b 	bl	80038ac <_free_r>
 8003a16:	4625      	mov	r5, r4
 8003a18:	4628      	mov	r0, r5
 8003a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a1c:	f000 f826 	bl	8003a6c <_malloc_usable_size_r>
 8003a20:	42a0      	cmp	r0, r4
 8003a22:	d20f      	bcs.n	8003a44 <_realloc_r+0x48>
 8003a24:	4621      	mov	r1, r4
 8003a26:	4638      	mov	r0, r7
 8003a28:	f7ff ff8e 	bl	8003948 <_malloc_r>
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d0f2      	beq.n	8003a18 <_realloc_r+0x1c>
 8003a32:	4631      	mov	r1, r6
 8003a34:	4622      	mov	r2, r4
 8003a36:	f7ff ff15 	bl	8003864 <memcpy>
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	f7ff ff35 	bl	80038ac <_free_r>
 8003a42:	e7e9      	b.n	8003a18 <_realloc_r+0x1c>
 8003a44:	4635      	mov	r5, r6
 8003a46:	e7e7      	b.n	8003a18 <_realloc_r+0x1c>

08003a48 <_sbrk_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	4c06      	ldr	r4, [pc, #24]	; (8003a64 <_sbrk_r+0x1c>)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4605      	mov	r5, r0
 8003a50:	4608      	mov	r0, r1
 8003a52:	6023      	str	r3, [r4, #0]
 8003a54:	f7fc fe4e 	bl	80006f4 <_sbrk>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_sbrk_r+0x1a>
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_sbrk_r+0x1a>
 8003a60:	602b      	str	r3, [r5, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	20000198 	.word	0x20000198

08003a68 <__malloc_lock>:
 8003a68:	4770      	bx	lr

08003a6a <__malloc_unlock>:
 8003a6a:	4770      	bx	lr

08003a6c <_malloc_usable_size_r>:
 8003a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a70:	1f18      	subs	r0, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfbc      	itt	lt
 8003a76:	580b      	ldrlt	r3, [r1, r0]
 8003a78:	18c0      	addlt	r0, r0, r3
 8003a7a:	4770      	bx	lr

08003a7c <_init>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	bf00      	nop
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr

08003a88 <_fini>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	bf00      	nop
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr
